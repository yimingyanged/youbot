/* Auto-generated by genmsg_cpp for file /media/sf_youbot_edinburgh/workspaces/andrew/src/cyphy-vis-slam/geometric_verification/msg/Debug.msg */
#ifndef GEOMETRIC_VERIFICATION_MESSAGE_DEBUG_H
#define GEOMETRIC_VERIFICATION_MESSAGE_DEBUG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"

namespace geometric_verification
{
template <class ContainerAllocator>
struct Debug_ {
  typedef Debug_<ContainerAllocator> Type;

  Debug_()
  : header()
  , from(0)
  , to(0)
  , transform()
  {
  }

  Debug_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , from(0)
  , to(0)
  , transform(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _from_type;
  int32_t from;

  typedef int32_t _to_type;
  int32_t to;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _transform_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  transform;


  typedef boost::shared_ptr< ::geometric_verification::Debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::geometric_verification::Debug_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Debug
typedef  ::geometric_verification::Debug_<std::allocator<void> > Debug;

typedef boost::shared_ptr< ::geometric_verification::Debug> DebugPtr;
typedef boost::shared_ptr< ::geometric_verification::Debug const> DebugConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::geometric_verification::Debug_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::geometric_verification::Debug_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace geometric_verification

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::geometric_verification::Debug_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::geometric_verification::Debug_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::geometric_verification::Debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8a63f5f367844aa4aff54df682ef97fe";
  }

  static const char* value(const  ::geometric_verification::Debug_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8a63f5f367844aa4ULL;
  static const uint64_t static_value2 = 0xaff54df682ef97feULL;
};

template<class ContainerAllocator>
struct DataType< ::geometric_verification::Debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometric_verification/Debug";
  }

  static const char* value(const  ::geometric_verification::Debug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::geometric_verification::Debug_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32 from \n\
int32 to \n\
geometry_msgs/Pose transform\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::geometric_verification::Debug_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::geometric_verification::Debug_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::geometric_verification::Debug_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::geometric_verification::Debug_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.from);
    stream.next(m.to);
    stream.next(m.transform);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Debug_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::geometric_verification::Debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::geometric_verification::Debug_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "from: ";
    Printer<int32_t>::stream(s, indent + "  ", v.from);
    s << indent << "to: ";
    Printer<int32_t>::stream(s, indent + "  ", v.to);
    s << indent << "transform: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GEOMETRIC_VERIFICATION_MESSAGE_DEBUG_H

