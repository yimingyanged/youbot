/* Auto-generated by genmsg_cpp for file /media/sf_youbot_edinburgh/workspaces/andrew/src/cyphy-vis-slam/slam_backend/msg/AddLoopClosure.msg */
#ifndef SLAM_BACKEND_MESSAGE_ADDLOOPCLOSURE_H
#define SLAM_BACKEND_MESSAGE_ADDLOOPCLOSURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/PoseWithCovarianceStamped.h"

namespace slam_backend
{
template <class ContainerAllocator>
struct AddLoopClosure_ {
  typedef AddLoopClosure_<ContainerAllocator> Type;

  AddLoopClosure_()
  : header()
  , node_id1(0)
  , node_id2(0)
  , interpolated_time()
  , frac(0.0)
  , transform()
  {
  }

  AddLoopClosure_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , node_id1(0)
  , node_id2(0)
  , interpolated_time()
  , frac(0.0)
  , transform(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _node_id1_type;
  int32_t node_id1;

  typedef int32_t _node_id2_type;
  int32_t node_id2;

  typedef ros::Time _interpolated_time_type;
  ros::Time interpolated_time;

  typedef float _frac_type;
  float frac;

  typedef  ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  _transform_type;
   ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  transform;


  typedef boost::shared_ptr< ::slam_backend::AddLoopClosure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_backend::AddLoopClosure_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddLoopClosure
typedef  ::slam_backend::AddLoopClosure_<std::allocator<void> > AddLoopClosure;

typedef boost::shared_ptr< ::slam_backend::AddLoopClosure> AddLoopClosurePtr;
typedef boost::shared_ptr< ::slam_backend::AddLoopClosure const> AddLoopClosureConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::slam_backend::AddLoopClosure_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::slam_backend::AddLoopClosure_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace slam_backend

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::slam_backend::AddLoopClosure_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::slam_backend::AddLoopClosure_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::slam_backend::AddLoopClosure_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d376227da7717c769b6aec116b010f98";
  }

  static const char* value(const  ::slam_backend::AddLoopClosure_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd376227da7717c76ULL;
  static const uint64_t static_value2 = 0x9b6aec116b010f98ULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_backend::AddLoopClosure_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_backend/AddLoopClosure";
  }

  static const char* value(const  ::slam_backend::AddLoopClosure_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::slam_backend::AddLoopClosure_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32 node_id1\n\
int32 node_id2\n\
time interpolated_time\n\
float32 frac\n\
geometry_msgs/PoseWithCovarianceStamped transform\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovarianceStamped\n\
# This expresses an estimated pose with a reference coordinate frame and timestamp\n\
\n\
Header header\n\
PoseWithCovariance pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::slam_backend::AddLoopClosure_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::slam_backend::AddLoopClosure_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::slam_backend::AddLoopClosure_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::slam_backend::AddLoopClosure_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.node_id1);
    stream.next(m.node_id2);
    stream.next(m.interpolated_time);
    stream.next(m.frac);
    stream.next(m.transform);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddLoopClosure_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_backend::AddLoopClosure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::slam_backend::AddLoopClosure_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "node_id1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.node_id1);
    s << indent << "node_id2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.node_id2);
    s << indent << "interpolated_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.interpolated_time);
    s << indent << "frac: ";
    Printer<float>::stream(s, indent + "  ", v.frac);
    s << indent << "transform: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SLAM_BACKEND_MESSAGE_ADDLOOPCLOSURE_H

