/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/youbot/ros/workspaces/youbot/src/youbot_oodl/msg/PowerBoardState.msg
 *
 */


#ifndef YOUBOT_COMMON_MESSAGE_POWERBOARDSTATE_H
#define YOUBOT_COMMON_MESSAGE_POWERBOARDSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace youbot_common
{
template <class ContainerAllocator>
struct PowerBoardState_
{
  typedef PowerBoardState_<ContainerAllocator> Type;

  PowerBoardState_()
    : header()
    , name()
    , serial_num(0)
    , input_voltage(0.0)
    , master_state(0)
    , circuit_state()
    , circuit_voltage()
    , run_stop(false)
    , wireless_stop(false)  {
      circuit_state.assign(0);

      circuit_voltage.assign(0.0);
  }
  PowerBoardState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , serial_num(0)
    , input_voltage(0.0)
    , master_state(0)
    , circuit_state()
    , circuit_voltage()
    , run_stop(false)
    , wireless_stop(false)  {
      circuit_state.assign(0);

      circuit_voltage.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint32_t _serial_num_type;
  _serial_num_type serial_num;

   typedef double _input_voltage_type;
  _input_voltage_type input_voltage;

   typedef int8_t _master_state_type;
  _master_state_type master_state;

   typedef boost::array<int8_t, 3>  _circuit_state_type;
  _circuit_state_type circuit_state;

   typedef boost::array<double, 3>  _circuit_voltage_type;
  _circuit_voltage_type circuit_voltage;

   typedef uint8_t _run_stop_type;
  _run_stop_type run_stop;

   typedef uint8_t _wireless_stop_type;
  _wireless_stop_type wireless_stop;


    enum { STATE_NOPOWER = 0 };
     enum { STATE_STANDBY = 1 };
     enum { STATE_PUMPING = 2 };
     enum { STATE_ON = 3 };
     enum { STATE_ENABLED = 3 };
     enum { STATE_DISABLED = 4 };
     enum { MASTER_NOPOWER = 0 };
     enum { MASTER_STANDBY = 1 };
     enum { MASTER_ON = 2 };
     enum { MASTER_OFF = 3 };
     enum { MASTER_SHUTDOWN = 4 };
 

  typedef boost::shared_ptr< ::youbot_common::PowerBoardState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::youbot_common::PowerBoardState_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct PowerBoardState_

typedef ::youbot_common::PowerBoardState_<std::allocator<void> > PowerBoardState;

typedef boost::shared_ptr< ::youbot_common::PowerBoardState > PowerBoardStatePtr;
typedef boost::shared_ptr< ::youbot_common::PowerBoardState const> PowerBoardStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::youbot_common::PowerBoardState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::youbot_common::PowerBoardState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace youbot_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'youbot_common': ['/home/youbot/ros/workspaces/youbot/src/youbot_oodl/msg'], 'std_msgs': ['/opt/ros/groovy/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::youbot_common::PowerBoardState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::youbot_common::PowerBoardState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::youbot_common::PowerBoardState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::youbot_common::PowerBoardState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::youbot_common::PowerBoardState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::youbot_common::PowerBoardState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::youbot_common::PowerBoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08899b671e6a1a449e7ce0000da8ae7b";
  }

  static const char* value(const ::youbot_common::PowerBoardState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08899b671e6a1a44ULL;
  static const uint64_t static_value2 = 0x9e7ce0000da8ae7bULL;
};

template<class ContainerAllocator>
struct DataType< ::youbot_common::PowerBoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "youbot_common/PowerBoardState";
  }

  static const char* value(const ::youbot_common::PowerBoardState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::youbot_common::PowerBoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message communicates the state of the PR2's power board.\n\
int8 STATE_NOPOWER=0\n\
int8 STATE_STANDBY=1\n\
int8 STATE_PUMPING=2\n\
int8 STATE_ON=3\n\
\n\
# Preferred over STATE_ON, keeping STATE_ON for backcompat\n\
int8 STATE_ENABLED=3\n\
\n\
int8 STATE_DISABLED=4\n\
\n\
int8 MASTER_NOPOWER=0\n\
int8 MASTER_STANDBY=1\n\
int8 MASTER_ON=2\n\
int8 MASTER_OFF=3\n\
int8 MASTER_SHUTDOWN=4\n\
\n\
Header header\n\
# Name with serial number\n\
string name\n\
# Serial number for this board's message\n\
uint32 serial_num\n\
# Input voltage to power board\n\
float64 input_voltage\n\
\n\
# Master States:\n\
# MASTER_NOPOWER, MASTER_STANDBY, MASTER_ON, MASTER_OFF, MASTER_SHUTDOWN\n\
\n\
# The master state machine's state in the powerboard\n\
int8 master_state\n\
\n\
# Circuit States:\n\
# STATE_NOPOWER, STATE_STANDBY, STATE_PUMPING, STATE_ON, STATE_DISABLED\n\
\n\
# One of the above states\n\
int8[3] circuit_state\n\
# Output voltage of each circuit\n\
float64[3] circuit_voltage\n\
\n\
# True if robot should be enabled\n\
#Note - if the wireless run-stop is hit, this will be unobservable\n\
bool run_stop\n\
bool wireless_stop\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const ::youbot_common::PowerBoardState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::youbot_common::PowerBoardState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.serial_num);
      stream.next(m.input_voltage);
      stream.next(m.master_state);
      stream.next(m.circuit_state);
      stream.next(m.circuit_voltage);
      stream.next(m.run_stop);
      stream.next(m.wireless_stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PowerBoardState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::youbot_common::PowerBoardState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::youbot_common::PowerBoardState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "serial_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.serial_num);
    s << indent << "input_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.input_voltage);
    s << indent << "master_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.master_state);
    s << indent << "circuit_state[]" << std::endl;
    for (size_t i = 0; i < v.circuit_state.size(); ++i)
    {
      s << indent << "  circuit_state[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.circuit_state[i]);
    }
    s << indent << "circuit_voltage[]" << std::endl;
    for (size_t i = 0; i < v.circuit_voltage.size(); ++i)
    {
      s << indent << "  circuit_voltage[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.circuit_voltage[i]);
    }
    s << indent << "run_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.run_stop);
    s << indent << "wireless_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wireless_stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOUBOT_COMMON_MESSAGE_POWERBOARDSTATE_H
