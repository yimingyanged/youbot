/* Auto-generated by genmsg_cpp for file /media/sf_youbot_edinburgh/workspaces/andrew/src/cyphy-vis-slam/slam_backend/msg/Graph.msg */
#ifndef SLAM_BACKEND_MESSAGE_GRAPH_H
#define SLAM_BACKEND_MESSAGE_GRAPH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose2D.h"

namespace slam_backend
{
template <class ContainerAllocator>
struct Graph_ {
  typedef Graph_<ContainerAllocator> Type;

  Graph_()
  : header()
  , id()
  , stamp()
  , pose()
  {
  }

  Graph_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , id(_alloc)
  , stamp(_alloc)
  , pose(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  id;

  typedef std::vector<ros::Time, typename ContainerAllocator::template rebind<ros::Time>::other >  _stamp_type;
  std::vector<ros::Time, typename ContainerAllocator::template rebind<ros::Time>::other >  stamp;

  typedef std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  _pose_type;
  std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  pose;


  typedef boost::shared_ptr< ::slam_backend::Graph_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slam_backend::Graph_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Graph
typedef  ::slam_backend::Graph_<std::allocator<void> > Graph;

typedef boost::shared_ptr< ::slam_backend::Graph> GraphPtr;
typedef boost::shared_ptr< ::slam_backend::Graph const> GraphConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::slam_backend::Graph_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::slam_backend::Graph_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace slam_backend

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::slam_backend::Graph_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::slam_backend::Graph_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::slam_backend::Graph_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22c153734f96e1220037747f8406db1f";
  }

  static const char* value(const  ::slam_backend::Graph_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x22c153734f96e122ULL;
  static const uint64_t static_value2 = 0x0037747f8406db1fULL;
};

template<class ContainerAllocator>
struct DataType< ::slam_backend::Graph_<ContainerAllocator> > {
  static const char* value() 
  {
    return "slam_backend/Graph";
  }

  static const char* value(const  ::slam_backend::Graph_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::slam_backend::Graph_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32[] id\n\
time[] stamp\n\
geometry_msgs/Pose2D[] pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::slam_backend::Graph_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::slam_backend::Graph_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::slam_backend::Graph_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::slam_backend::Graph_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.id);
    stream.next(m.stamp);
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Graph_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slam_backend::Graph_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::slam_backend::Graph_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "stamp[]" << std::endl;
    for (size_t i = 0; i < v.stamp.size(); ++i)
    {
      s << indent << "  stamp[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.stamp[i]);
    }
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "    ", v.pose[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SLAM_BACKEND_MESSAGE_GRAPH_H

