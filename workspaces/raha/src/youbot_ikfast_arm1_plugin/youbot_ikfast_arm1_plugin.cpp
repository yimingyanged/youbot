/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-10-10 09:12:37.236392
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[0]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((IkReal(0.0600000000000000))*(x9));
x11=((IkReal(0.0600000000000000))*(x5));
x12=((IkReal(0.410000000000000))*(x4));
x13=((IkReal(0.135500000000000))*(x3));
x14=((IkReal(0.135500000000000))*(x2));
x15=((IkReal(0.0600000000000000))*(x6));
x16=((IkReal(1.00000000000000))*(x7));
x17=((IkReal(0.410000000000000))*(x2));
x18=((IkReal(0.410000000000000))*(x3));
x19=((IkReal(1.00000000000000))*(x2));
x20=((x0)*(x1));
x21=((x0)*(x4));
x22=((x3)*(x4));
x23=((x1)*(x2));
x24=((x3)*(x7));
x25=((x1)*(x7));
x26=((x4)*(x7));
x27=((IkReal(1.00000000000000))*(x20)*(x3));
x28=((((x1)*(x3)))+(((IkReal(-1.00000000000000))*(x19)*(x4))));
x29=((((x21)*(x3)))+(((x2)*(x20))));
x30=((((x1)*(x24)))+(((IkReal(-1.00000000000000))*(x16)*(x2)*(x4))));
x31=((x16)*(((x22)+(x23))));
IkReal x32=((IkReal(1.00000000000000))*(x20));
IkReal x33=((x0)*(x12));
eetrans[0]=((((x8)*(((((x11)*(((((IkReal(-1.00000000000000))*(x27)))+(((x2)*(x21)))))))+(((x15)*(x29)))))))+(((IkReal(-0.00400000000000000))*(x20)))+(((IkReal(0.0400000000000000))*(x0)))+(((x14)*(x20)))+(((IkReal(0.158500000000000))*(x21)))+(((IkReal(-1.00000000000000))*(x10)*(x7)))+(((x6)*(((((IkReal(-1.00000000000000))*(x18)*(x32)))+(((x2)*(x33)))))))+(((x13)*(x21)))+(((x5)*(((((IkReal(-1.00000000000000))*(x3)*(x33)))+(((IkReal(-1.00000000000000))*(x17)*(x32))))))));
IkReal x34=((IkReal(1.00000000000000))*(x25));
eetrans[1]=((IkReal(-0.00600000000000000))+(((IkReal(-0.00400000000000000))*(x25)))+(((x0)*(x10)))+(((IkReal(0.0400000000000000))*(x7)))+(((x14)*(x25)))+(((x6)*(((((IkReal(-1.00000000000000))*(x18)*(x34)))+(((x12)*(x2)*(x7)))))))+(((IkReal(0.158500000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x8)*(((((x11)*(x30)))+(((IkReal(-1.00000000000000))*(x15)*(x31)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x12)*(x24)))+(((IkReal(-1.00000000000000))*(x17)*(x34)))))))+(((x13)*(x26))));
eetrans[2]=((IkReal(0.243000000000000))+(((x1)*(x13)))+(((IkReal(-1.00000000000000))*(x14)*(x4)))+(((IkReal(0.158500000000000))*(x1)))+(((IkReal(0.00400000000000000))*(x4)))+(((x5)*(((((IkReal(-1.00000000000000))*(x1)*(x18)))+(((x12)*(x2)))))))+(((x8)*(((((x11)*(((x22)+(x23)))))+(((x15)*(x28)))))))+(((x6)*(((((x1)*(x17)))+(((x12)*(x3))))))));
eerot[0]=((((x29)*(x5)))+(((x6)*(((((IkReal(-1.00000000000000))*(x19)*(x21)))+(x27))))));
eerot[1]=((((x31)*(x5)))+(((x30)*(x6))));
eerot[2]=((((x28)*(x5)))+(((x6)*(((((IkReal(-1.00000000000000))*(x22)))+(((IkReal(-1.00000000000000))*(x1)*(x19))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=((IkReal(-1.00000000000000))*(r00));
new_px=((IkReal(-1.00000000000000))*(px));
new_r01=r01;
new_py=((IkReal(0.00600000000000000))+(py));
new_r02=((IkReal(-1.00000000000000))*(r02));
new_pz=((IkReal(0.243000000000000))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(r01) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x35=IKatan2(r00, r01);
j2array[0]=((IkReal(-1.00000000000000))*(x35));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x35))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((IkReal(-0.0181939673000000))+(((IkReal(1.03976000000000))*(px)*(pz)*(r00)))+(((IkReal(0.634000000000000))*(cj2)*(pp)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(-0.378253700000000))*(pz)*(r02)))+(((IkReal(1.03976000000000))*(py)*(pz)*(r01)))+(((IkReal(-0.0228747200000000))*(cj2)*(py)*(r02)))+(((IkReal(0.0604384000000000))*(cj2)*(pz)*(r01)*(r02)))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(1.26800000000000))*(px)*(r00)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-0.0286883520000000))*(cj2)*(py)*((r02)*(r02))))+(((IkReal(8.00000000000000))*(cj2)*(px)*(py)*(sj2)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((cj2)*(cj2))*((px)*(px))*((py)*(py))*((r00)*(r00))))+(((IkReal(0.0130175196800000))*(cj2)*(r01)))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-0.0591712000000000))*(px)*(sj2)))+(((IkReal(-0.634000000000000))*(pp)*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(0.114372332000000))*(pz)*((r02)*(r02))))+(((IkReal(-0.0317500480000000))*(px)*(sj2)*((r00)*(r00))))+(((IkReal(-0.0721600000000000))*(cj2)*(pp)*(r01)))+(((IkReal(0.260307000000000))*(pp)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.520614000000000))*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-3.28000000000000))*(r00)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(0.519880000000000))*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.288640000000000))*(px)*(py)*(r01)*(sj2)))+(((IkReal(0.0468926561200000))*(r02)))+(((IkReal(-0.213451740000000))*(py)*(r01)*((cj2)*(cj2))))+(((IkReal(-4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.0557920000000000))*(cj2)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-0.519880000000000))*(py)*(pz)*(r01)*((cj2)*(cj2))))+(((IkReal(1.26800000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(0.704000000000000))*(cj2)*(px)*(r00)*(r01)*((py)*(py))))+(((IkReal(-0.0312137936040000))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(py)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(0.0305789542080000))*(cj2)*(r00)*(r01)*(sj2)))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(-1.26800000000000))*(cj2)*(pp)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(-1.26800000000000))*(pz)*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0557920000000000))*(cj2)*(py)*(pz)*((r01)*(r01))))+(((IkReal(0.213150800000000))*(pz)))+(((IkReal(-3.28000000000000))*(py)*(r01)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.672400000000000))*((cj2)*(cj2))*((py)*(py))))+(((IkReal(1.26800000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r01)*(r01))))+(((IkReal(-0.0557920000000000))*(cj2)*(px)*(py)*(r00)*(r02)))+(((IkReal(-0.451030000000000))*(py)*(pz)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-8.00000000000000))*(px)*(pz)*(r00)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(1.26800000000000))*(py)*(r01)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(0.352000000000000))*(pp)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0557920000000000))*(pp)*(r00)*(r02)*(sj2)))+(((IkReal(-1.26800000000000))*(px)*(r00)*(r02)*((pz)*(pz))*((sj2)*(sj2))))+(((IkReal(-0.176000000000000))*(pp)*(px)*(sj2)*((r02)*(r02))))+(((IkReal(0.144320000000000))*(cj2)*(r01)*((pz)*(pz))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))*((pp)*(pp))*((r01)*(r01))))+(((IkReal(-0.103343268000000))*(cj2)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(-3.28000000000000))*(py)*(r01)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj2)*(px)*(pz)*(r01)*(r02)*(sj2)*((py)*(py))))+(((IkReal(-0.103343268000000))*(pz)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(1.26800000000000))*(r00)*(r02)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(0.206686536000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(-8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(0.352000000000000))*(cj2)*(py)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(1.64000000000000))*(pp)*(py)*(r01)*((cj2)*(cj2))))+(((IkReal(-0.288640000000000))*(r00)*(sj2)*((px)*(px))))+(((IkReal(0.0557920000000000))*(px)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(-1.26800000000000))*(pz)*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.108233000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.260307000000000))*(pp)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(8.00000000000000))*(cj2)*(py)*(sj2)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-2.53600000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)*((py)*(py))))+(((IkReal(-0.0887510600000000))*(py)*(r01)))+(((IkReal(-3.28000000000000))*(px)*(r00)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(16.0000000000000))*(cj2)*(py)*(pz)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(-0.520614000000000))*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(px)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-0.144320000000000))*(r00)*(sj2)*((pz)*(pz))))+(((IkReal(-0.108233000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.634000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-3.28000000000000))*(px)*(r00)*((pz)*(pz))))+(((IkReal(0.103343268000000))*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.0557920000000000))*(px)*(py)*(r01)*(r02)*(sj2)))+(((IkReal(-0.103343268000000))*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.520614000000000))*(cj2)*(px)*(py)*(sj2)*((r00)*(r00))))+(((IkReal(0.0557920000000000))*(py)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(-0.0317500480000000))*(py)*(r00)*(r01)*(sj2)))+(((IkReal(0.0228747200000000))*(pz)*(r00)*(sj2)))+(((IkReal(-0.0887510600000000))*(px)*(r00)))+(((IkReal(1.26800000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(1.26800000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-4.00000000000000))*((px)*(px))*((pz)*(pz))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(-0.103343268000000))*(cj2)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(-0.634000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.352000000000000))*(px)*(py)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(0.353052000000000))*(pp)*((r02)*(r02))))+(((IkReal(1.26800000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(2.53600000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.520614000000000))*(cj2)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(0.0317500480000000))*(cj2)*(py)*((r01)*(r01))))+(((IkReal(2.53600000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-0.0557920000000000))*(cj2)*(px)*(pz)*(r00)*(r01)))+(((IkReal(-8.00000000000000))*(pz)*(r01)*(r02)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(8.00000000000000))*(cj2)*(px)*(sj2)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(0.0557920000000000))*(px)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(1.26800000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.216466000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(1.26800000000000))*(r01)*(r02)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(0.352000000000000))*(cj2)*(py)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.213451740000000))*(cj2)*(py)*(r00)*(sj2)))+(((IkReal(-1.26800000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(-4.00000000000000))*((px)*(px)*(px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(px)*(py)*(sj2)*((r01)*(r01))))+(((IkReal(-3.28000000000000))*(pz)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.704000000000000))*(py)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-0.213451740000000))*(px)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.922570000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-0.352000000000000))*(sj2)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-4.00000000000000))*((cj2)*(cj2))*((py)*(py))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.519880000000000))*(px)*(pz)*(r00)*((sj2)*(sj2))))+(((IkReal(2.53600000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(0.00957948640000000))*(r00)*(r02)*(sj2)))+(((IkReal(0.519880000000000))*(cj2)*(px)*(pz)*(r01)*(sj2)))+(((IkReal(0.352000000000000))*(cj2)*(px)*(py)*(pz)*(r00)*(r02)))+(((IkReal(0.0286883520000000))*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-0.352000000000000))*(px)*(sj2)*((py)*(py))*((r01)*(r01))))+(((IkReal(1.26800000000000))*(pz)*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(-4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0557920000000000))*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(-2.53600000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(-0.0557920000000000))*(cj2)*(r01)*(r02)*((py)*(py))))+(((IkReal(0.352000000000000))*(cj2)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.451030000000000))*(px)*(pz)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(6.56000000000000))*(cj2)*(px)*(py)*(pz)*(r02)*(sj2)))+(((IkReal(-0.176000000000000))*(cj2)*(pp)*(px)*(r00)*(r01)))+(((IkReal(-1.64000000000000))*(cj2)*(pp)*(px)*(r01)*(sj2)))+(((IkReal(0.0557920000000000))*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(0.176000000000000))*(pp)*(py)*(r00)*(r01)*(sj2)))+(((IkReal(0.0695840000000000))*(cj2)*(px)*(py)*(sj2)*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(0.288640000000000))*(cj2)*(r01)*((py)*(py))))+(((IkReal(-2.53600000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(0.352000000000000))*(cj2)*(pz)*(r01)*(r02)*((py)*(py))))+(((IkReal(-3.28000000000000))*(r02)*((pz)*(pz)*(pz))))+(((IkReal(1.34480000000000))*(cj2)*(px)*(py)*(sj2)))+(((IkReal(-0.0130175196800000))*(r00)*(sj2)))+(((IkReal(1.26800000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(4.00000000000000))*(pp)*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-1.64000000000000))*(cj2)*(pp)*(py)*(r00)*(sj2)))+(((IkReal(-0.0347920000000000))*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(-0.672400000000000))*((pz)*(pz))))+(((IkReal(-0.352000000000000))*(py)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(2.00000000000000))*(cj2)*(r00)*(r01)*(sj2)*((pp)*(pp))))+(((IkReal(0.634000000000000))*(pp)*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.520614000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)))+(((IkReal(0.0557920000000000))*(cj2)*(pp)*(r01)*(r02)))+(((IkReal(1.26800000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-0.00957948640000000))*(cj2)*(r01)*(r02)))+(((IkReal(0.451030000000000))*(cj2)*(py)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(0.103343268000000))*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-0.352000000000000))*(r00)*(r02)*(sj2)*((pz)*(pz)*(pz))))+(((IkReal(-0.0557920000000000))*(cj2)*(py)*(pz)*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r01)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(-4.00000000000000))*((cj2)*(cj2))*((py)*(py)*(py)*(py))*((r01)*(r01))))+(((IkReal(0.0317500480000000))*(cj2)*(px)*(r00)*(r01)))+(((IkReal(-0.520614000000000))*(px)*(py)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(-8.00000000000000))*(py)*(pz)*(r01)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-3.28000000000000))*(pz)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-0.520614000000000))*(px)*(py)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(0.352000000000000))*(cj2)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.0347920000000000))*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(0.0721600000000000))*(pp)*(r00)*(sj2)))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.0152894771040000))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-1.03976000000000))*(cj2)*(px)*(py)*(r02)*(sj2)))+(((IkReal(-0.922570000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-8.00000000000000))*(pz)*(r00)*(r02)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(-1.26800000000000))*(py)*(r01)*(r02)*((cj2)*(cj2))*((pz)*(pz))))+(((IkReal(0.451030000000000))*(cj2)*(px)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-0.0347920000000000))*((cj2)*(cj2))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(1.26800000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(-1.26800000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(0.352000000000000))*(cj2)*(px)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-0.352000000000000))*(px)*(sj2)*((pz)*(pz))*((r00)*(r00))))+(((IkReal(6.56000000000000))*(cj2)*(py)*(r00)*(sj2)*((px)*(px))))+(((IkReal(0.634000000000000))*(cj2)*(pp)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0228747200000000))*(cj2)*(pz)*(r01)))+(((IkReal(0.114372332000000))*(px)*(r00)*(r02)))+(((IkReal(1.26800000000000))*(pz)*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(-0.144320000000000))*(px)*(pz)*(r02)*(sj2)))+(((IkReal(-8.00000000000000))*(py)*(r00)*(r01)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.352000000000000))*(pz)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(1.03976000000000))*(r02)*((pz)*(pz))))+(((IkReal(-0.259940000000000))*(pp)*(r02)))+(((IkReal(0.519880000000000))*(cj2)*(py)*(pz)*(r00)*(sj2)))+(((IkReal(-0.0604384000000000))*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.176000000000000))*(cj2)*(pp)*(py)*((r01)*(r01))))+(((IkReal(0.520614000000000))*(cj2)*(px)*(py)*(sj2)*((r01)*(r01))))+(((IkReal(0.519880000000000))*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.352000000000000))*(cj2)*(pp)*(pz)*(r01)*(r02)))+(((IkReal(0.114372332000000))*(py)*(r01)*(r02)))+(((IkReal(-0.634000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-0.0347920000000000))*((pz)*(pz))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.0228747200000000))*(px)*(r02)*(sj2)))+(((IkReal(0.144320000000000))*(cj2)*(py)*(pz)*(r02)))+(((IkReal(-0.814337000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.634000000000000))*(pp)*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(0.520614000000000))*(cj2)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(0.0695840000000000))*(cj2)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj2)*(r00)*(r01)*(sj2)*((px)*(px))*((py)*(py))))+(((IkReal(-3.28000000000000))*(r01)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(0.634000000000000))*(pp)*(pz)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(0.176000000000000))*(pp)*(px)*(sj2)*((r00)*(r00))))+(((IkReal(-4.00000000000000))*((px)*(px))*((py)*(py))*((r01)*(r01))*((sj2)*(sj2))))+(((IkReal(6.56000000000000))*(cj2)*(px)*(r01)*(sj2)*((py)*(py))))+(((IkReal(1.64000000000000))*(pp)*(pz)*(r02)))+(((IkReal(4.00000000000000))*(pp)*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.0152894771040000))*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(1.64000000000000))*(pp)*(px)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.672400000000000))*((px)*(px))*((sj2)*(sj2))))+(((IkReal(0.176000000000000))*(cj2)*(pp)*(py)*((r02)*(r02))))+(((IkReal(0.0591712000000000))*(cj2)*(py)))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(px)*(py)*(sj2)*((r00)*(r00))))+(((IkReal(0.213451740000000))*(cj2)*(px)*(r01)*(sj2)))+(((IkReal(0.288640000000000))*(cj2)*(px)*(py)*(r00))));
op[1]=((IkReal(-0.0170520640000000))+(((IkReal(-0.435431200000000))*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(0.519880000000000))*(pp)*(r00)*(sj2)))+(((IkReal(-0.0320000000000000))*(pp)*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.0608640000000000))*(pp)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(2.07952000000000))*(cj2)*(px)*(py)*(r00)))+(((IkReal(-0.0320000000000000))*(cj2)*(pp)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(0.0320000000000000))*(pp)*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-0.0831808000000000))*(py)*(r01)))+(((IkReal(-0.0320000000000000))*(pp)*(pz)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-0.0640000000000000))*(py)*(r01)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(0.0640000000000000))*(pz)*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0262400000000000))*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-2.53600000000000))*(sj2)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0640000000000000))*(px)*(r00)*(r02)*((pz)*(pz))*((sj2)*(sj2))))+(((IkReal(-0.0640000000000000))*(r01)*(r02)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(0.399140000000000))*(py)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(0.0640000000000000))*(py)*(r01)*(r02)*((cj2)*(cj2))*((pz)*(pz))))+(((IkReal(-0.128000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(2.53600000000000))*(cj2)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.121728000000000))*(cj2)*(px)*(py)*(sj2)*((r00)*(r00))))+(((IkReal(0.0202880000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.121728000000000))*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-2.53600000000000))*(r00)*(r02)*(sj2)*((pz)*(pz)*(pz))))+(((IkReal(-0.0425886080000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(-0.0640000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.0956152898400000))*(cj2)*(r01)))+(((IkReal(-0.121728000000000))*(px)*(py)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(-0.0640000000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(-0.0524800000000000))*(r02)*((pz)*(pz))))+(((IkReal(-0.0212943040000000))*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(0.163647400000000))*(px)*(r02)*(sj2)))+(((IkReal(0.435431200000000))*(cj2)*(pz)*(r01)*(r02)))+(((IkReal(-0.101440000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.0608640000000000))*(pp)*((r02)*(r02))))+(((IkReal(0.0262400000000000))*(py)*(pz)*(r01)*((cj2)*(cj2))))+(((IkReal(-1.26800000000000))*(pp)*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-0.426301600000000))*(px)*(sj2)))+(((IkReal(0.0320000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(2.53600000000000))*(cj2)*(pz)*(r01)*(r02)*((py)*(py))))+(((IkReal(1.03976000000000))*(cj2)*(r01)*((pz)*(pz))))+(((IkReal(0.0811520000000000))*(px)*(pz)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(0.202880000000000))*(cj2)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(0.163647400000000))*(pz)*(r00)*(sj2)))+(((IkReal(0.399140000000000))*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(0.0212943040000000))*(cj2)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(-2.53600000000000))*(cj2)*(pp)*(pz)*(r01)*(r02)))+(((IkReal(0.202880000000000))*(cj2)*(px)*(py)*(sj2)*((r02)*(r02))))+(((IkReal(2.53600000000000))*(cj2)*(px)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-0.399140000000000))*(cj2)*(px)*(py)*(r00)*(r02)))+(((IkReal(-0.0640000000000000))*(r00)*(r02)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(0.0524800000000000))*(cj2)*(px)*(py)*(r02)*(sj2)))+(((IkReal(0.202223176000000))*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-0.121728000000000))*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.399140000000000))*(cj2)*(px)*(pz)*(r00)*(r01)))+(((IkReal(-0.0262400000000000))*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-1.26800000000000))*(cj2)*(pp)*(py)*((r01)*(r01))))+(((IkReal(0.399140000000000))*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(0.121728000000000))*(cj2)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-0.0640000000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-0.101440000000000))*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(-0.0811520000000000))*(cj2)*(px)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-1.26800000000000))*(cj2)*(pp)*(px)*(r00)*(r01)))+(((IkReal(-0.0108915113600000))*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-0.0811520000000000))*(cj2)*(py)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0640000000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-0.233208024000000))*(py)*(r00)*(r01)*(sj2)))+(((IkReal(0.0100091862400000))*((r02)*(r02))))+(((IkReal(-0.399140000000000))*(cj2)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(0.0103055040000000))*(py)*(r01)*(r02)))+(((IkReal(-0.0831808000000000))*(px)*(r00)))+(((IkReal(-2.53600000000000))*(px)*(sj2)*((py)*(py))*((r01)*(r01))))+(((IkReal(-2.07952000000000))*(r00)*(sj2)*((px)*(px))))+(((IkReal(-0.101440000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.399140000000000))*(px)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(-0.202880000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(1.26800000000000))*(pp)*(px)*(sj2)*((r00)*(r00))))+(((IkReal(-0.0640000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0640000000000000))*(pz)*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(0.0640000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(1.26800000000000))*(cj2)*(pp)*(py)*((r02)*(r02))))+(((IkReal(-0.399140000000000))*(cj2)*(py)*(pz)*((r01)*(r01))))+(((IkReal(0.128000000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(-0.0332723200000000))*(pz)*(r02)))+(((IkReal(-0.233208024000000))*(px)*(sj2)*((r00)*(r00))))+(((IkReal(5.07200000000000))*(cj2)*(px)*(r00)*(r01)*((py)*(py))))+(((IkReal(0.399140000000000))*(px)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(0.0103055040000000))*(px)*(r00)*(r02)))+(((IkReal(-0.163647400000000))*(cj2)*(py)*(r02)))+(((IkReal(-0.519880000000000))*(cj2)*(pp)*(r01)))+(((IkReal(1.03976000000000))*(cj2)*(py)*(pz)*(r02)))+(((IkReal(2.07952000000000))*(cj2)*(r01)*((py)*(py))))+(((IkReal(-5.07200000000000))*(py)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(0.0217830227200000))*(cj2)*(r00)*(r01)*(sj2)))+(((IkReal(-2.07952000000000))*(px)*(py)*(r01)*(sj2)))+(((IkReal(-2.53600000000000))*(py)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(2.53600000000000))*(cj2)*(py)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.0640000000000000))*(cj2)*(pp)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(-0.0524800000000000))*(py)*(pz)*(r01)))+(((IkReal(-0.0499084800000000))*(py)*(r01)*((cj2)*(cj2))))+(((IkReal(-0.0811520000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-0.0640000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.0262400000000000))*(cj2)*(px)*(pz)*(r01)*(sj2)))+(((IkReal(0.0640000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(0.0499084800000000))*(cj2)*(py)*(r00)*(sj2)))+(((IkReal(0.426301600000000))*(cj2)*(py)))+(((IkReal(-0.399140000000000))*(cj2)*(py)*(pz)*((r02)*(r02))))+(((IkReal(-0.121728000000000))*(px)*(py)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(-2.53600000000000))*(px)*(py)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-0.0262400000000000))*(cj2)*(py)*(pz)*(r00)*(sj2)))+(((IkReal(-0.163647400000000))*(cj2)*(pz)*(r01)))+(((IkReal(-0.399140000000000))*(cj2)*(r01)*(r02)*((py)*(py))))+(((IkReal(0.128000000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(-0.101440000000000))*((pz)*(pz))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-1.03976000000000))*(r00)*(sj2)*((pz)*(pz))))+(((IkReal(-0.0108915113600000))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.0956152898400000))*(r00)*(sj2)))+(((IkReal(0.0131200000000000))*(pp)*(r02)))+(((IkReal(2.53600000000000))*(cj2)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.0320000000000000))*(cj2)*(pp)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(0.233208024000000))*(cj2)*(px)*(r00)*(r01)))+(((IkReal(-0.0640000000000000))*(px)*(r00)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(0.0212943040000000))*(pz)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-0.0640000000000000))*(pz)*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(0.0499084800000000))*(cj2)*(px)*(r01)*(sj2)))+(((IkReal(-0.0640000000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(0.233208024000000))*(cj2)*(py)*((r01)*(r01))))+(((IkReal(-0.0640000000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(-0.128000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.121728000000000))*(cj2)*(px)*(py)*(sj2)*((r01)*(r01))))+(((IkReal(-1.03976000000000))*(px)*(pz)*(r02)*(sj2)))+(((IkReal(-0.0524800000000000))*(px)*(pz)*(r00)))+(((IkReal(2.53600000000000))*(cj2)*(px)*(py)*(pz)*(r00)*(r02)))+(((IkReal(-0.101440000000000))*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(0.0640000000000000))*(pz)*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.0320000000000000))*(pp)*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(0.0262400000000000))*(px)*(pz)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.121728000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)))+(((IkReal(-0.399140000000000))*(pp)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0640000000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r01)*(r01))))+(((IkReal(0.121728000000000))*(cj2)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-0.0685323380000000))*(cj2)*(r01)*(r02)))+(((IkReal(-2.53600000000000))*(px)*(sj2)*((pz)*(pz))*((r00)*(r00))))+(((IkReal(0.0685323380000000))*(r00)*(r02)*(sj2)))+(((IkReal(-0.0212943040000000))*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-0.128000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(0.0320000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(2.53600000000000))*(cj2)*(py)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.0212943040000000))*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.0103055040000000))*(pz)*((r02)*(r02))))+(((IkReal(0.0212943040000000))*(cj2)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(0.128000000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)*((py)*(py))))+(((IkReal(0.0320000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(0.00422525664000000))*(r02)))+(((IkReal(-0.0107584000000000))*(pz)))+(((IkReal(0.399140000000000))*(px)*(py)*(r01)*(r02)*(sj2)))+(((IkReal(1.26800000000000))*(pp)*(py)*(r00)*(r01)*(sj2)))+(((IkReal(0.0608640000000000))*(pp)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(2.53600000000000))*(pp)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0811520000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-0.202223176000000))*(cj2)*(py)*((r02)*(r02))))+(((IkReal(-0.0499084800000000))*(px)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.101440000000000))*((cj2)*(cj2))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.399140000000000))*(cj2)*(pp)*(r01)*(r02)))+(((IkReal(0.0811520000000000))*(py)*(pz)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-2.53600000000000))*(pz)*(r00)*(r02)*(sj2)*((px)*(px)))));
op[2]=((IkReal(-0.0359575986000000))+(((IkReal(1.70802000000000))*(cj2)*(py)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(3.28000000000000))*(pp)*(py)*(r01)*((cj2)*(cj2))))+(((IkReal(0.107584000000000))*(cj2)*(py)))+(((IkReal(-0.00121728000000000))*(pz)*((r02)*(r02))))+(((IkReal(0.0897712000000000))*(cj2)*(px)*(r00)*(r01)))+(((IkReal(-0.0670240000000000))*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(0.305684000000000))*(pp)*((r02)*(r02))))+(((IkReal(-0.640000000000000))*(px)*(py)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-0.0304320000000000))*(px)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(-0.0304320000000000))*(px)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(0.0124771200000000))*(cj2)*(pz)*(r01)))+(((IkReal(-0.524800000000000))*(r00)*(sj2)*((px)*(px))))+(((IkReal(-6.56000000000000))*(py)*(r01)*((pz)*(pz))))+(((IkReal(0.00121728000000000))*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-0.0897712000000000))*(px)*(sj2)*((r00)*(r00))))+(((IkReal(-0.00121728000000000))*(px)*(r00)*(r02)))+(((IkReal(0.00522517440000000))*(cj2)*(r01)*(r02)))+(((IkReal(-16.0000000000000))*(py)*(pz)*(r01)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-1.34480000000000))*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-8.00000000000000))*(cj2)*(pp)*(px)*(py)*(sj2)*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(cj2)*(pp)*(py)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0670240000000000))*((cj2)*(cj2))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.0304320000000000))*(py)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(0.0304320000000000))*(cj2)*(px)*(py)*(r00)*(r02)))+(((IkReal(-0.175402920000000))*(py)*(r01)))+(((IkReal(16.0000000000000))*(cj2)*(px)*(py)*(sj2)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-0.524800000000000))*(px)*(py)*(r01)*(sj2)))+(((IkReal(8.00000000000000))*(pp)*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-6.56000000000000))*(r01)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(0.755247880000000))*(cj2)*(px)*(r01)*(sj2)))+(((IkReal(-8.00000000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-0.0670240000000000))*((pz)*(pz))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.640000000000000))*(py)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(0.640000000000000))*(cj2)*(py)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-16.0000000000000))*(py)*(r00)*(r01)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(-1.34480000000000))*((pz)*(pz))))+(((IkReal(32.0000000000000))*(cj2)*(py)*(pz)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(-0.262400000000000))*(r00)*(sj2)*((pz)*(pz))))+(((IkReal(-16.0000000000000))*(pz)*(r01)*(r02)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(-8.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-6.56000000000000))*(px)*(r00)*((pz)*(pz))))+(((IkReal(-6.56000000000000))*(px)*(r00)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(0.320000000000000))*(pp)*(py)*(r00)*(r01)*(sj2)))+(((IkReal(-0.00121728000000000))*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.262400000000000))*(px)*(pz)*(r02)*(sj2)))+(((IkReal(-8.00000000000000))*((cj2)*(cj2))*((py)*(py))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0897712000000000))*(cj2)*(py)*((r01)*(r01))))+(((IkReal(0.262400000000000))*(cj2)*(r01)*((pz)*(pz))))+(((IkReal(8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-1.28000000000000))*(py)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(1.84206800000000))*(cj2)*(px)*(py)*(sj2)*((r00)*(r00))))+(((IkReal(-16.0000000000000))*(px)*(pz)*(r00)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(0.00121728000000000))*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(13.1200000000000))*(cj2)*(px)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-0.00121728000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(0.0304320000000000))*(cj2)*(r01)*(r02)*((py)*(py))))+(((IkReal(-0.0999630643680000))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.0368061920000000))*(cj2)*(r01)))+(((IkReal(-0.107584000000000))*(px)*(sj2)))+(((IkReal(-6.56000000000000))*(pz)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(0.640000000000000))*(cj2)*(px)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-16.0000000000000))*(pz)*(r00)*(r02)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(8.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.524800000000000))*(cj2)*(r01)*((py)*(py))))+(((IkReal(1.70802000000000))*(cj2)*(px)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(0.640000000000000))*(cj2)*(pz)*(r01)*(r02)*((py)*(py))))+(((IkReal(-1.84206800000000))*(px)*(py)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(-16.0000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.921034000000000))*(pp)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.134048000000000))*(cj2)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(0.0124771200000000))*(cj2)*(py)*(r02)))+(((IkReal(-0.755247880000000))*(py)*(r01)*((cj2)*(cj2))))+(((IkReal(-0.00121728000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(0.320000000000000))*(cj2)*(pp)*(py)*((r02)*(r02))))+(((IkReal(-1.84206800000000))*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(1.28000000000000))*(cj2)*(px)*(r00)*(r01)*((py)*(py))))+(((IkReal(-0.825274000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(13.1200000000000))*(cj2)*(px)*(py)*(pz)*(r02)*(sj2)))+(((IkReal(-2.00000000000000))*((cj2)*(cj2))*((pp)*(pp))*((r01)*(r01))))+(((IkReal(-0.0124771200000000))*(pz)*(r00)*(sj2)))+(((IkReal(1.84206800000000))*(cj2)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(0.524800000000000))*(cj2)*(px)*(py)*(r00)))+(((IkReal(3.28000000000000))*(pp)*(px)*(r00)*((sj2)*(sj2))))+(((IkReal(1.84206800000000))*(cj2)*(px)*(py)*(sj2)*((r01)*(r01))))+(((IkReal(-0.213906000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(0.921034000000000))*(pp)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-3.28000000000000))*(cj2)*(pp)*(py)*(r00)*(sj2)))+(((IkReal(16.0000000000000))*(cj2)*(py)*(sj2)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.640000000000000))*(cj2)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-3.28000000000000))*(cj2)*(pp)*(px)*(r01)*(sj2)))+(((IkReal(-0.320000000000000))*(cj2)*(pp)*(py)*((r01)*(r01))))+(((IkReal(0.131200000000000))*(pp)*(r00)*(sj2)))+(((IkReal(-0.640000000000000))*(pz)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(-0.175402920000000))*(px)*(r00)))+(((IkReal(-8.00000000000000))*((px)*(px))*((py)*(py))*((r01)*(r01))*((sj2)*(sj2))))+(((IkReal(0.0304320000000000))*(cj2)*(py)*(pz)*((r01)*(r01))))+(((IkReal(8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(-2.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-0.320000000000000))*(cj2)*(pp)*(px)*(r00)*(r01)))+(((IkReal(-6.56000000000000))*(py)*(r01)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.755247880000000))*(px)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.640000000000000))*(r00)*(r02)*(sj2)*((pz)*(pz)*(pz))))+(((IkReal(0.0304320000000000))*(pp)*(r00)*(r02)*(sj2)))+(((IkReal(-0.109888000000000))*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0201168000000000))*(cj2)*(py)*((r02)*(r02))))+(((IkReal(-0.0304320000000000))*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(-0.427812000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-8.00000000000000))*(cj2)*(pp)*(px)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-0.640000000000000))*(sj2)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-0.0304320000000000))*(px)*(py)*(r01)*(r02)*(sj2)))+(((IkReal(8.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.640000000000000))*(pp)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-8.00000000000000))*((px)*(px))*((pz)*(pz))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(8.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(-0.213906000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-8.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(0.134048000000000))*(cj2)*(px)*(py)*(sj2)*((r02)*(r02))))+(((IkReal(-0.0368061920000000))*(r00)*(sj2)))+(((IkReal(16.0000000000000))*(cj2)*(px)*(sj2)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.131200000000000))*(cj2)*(pp)*(r01)))+(((IkReal(0.320000000000000))*(pp)*(px)*(sj2)*((r00)*(r00))))+(((IkReal(-0.640000000000000))*(px)*(sj2)*((py)*(py))*((r01)*(r01))))+(((IkReal(3.28000000000000))*(pp)*(pz)*(r02)))+(((IkReal(-1.84206800000000))*(px)*(py)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(-1.84206800000000))*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(0.00243456000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(-0.320000000000000))*(pp)*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-16.0000000000000))*(px)*(r00)*(r01)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(0.0201168000000000))*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-0.640000000000000))*(cj2)*(pp)*(pz)*(r01)*(r02)))+(((IkReal(0.755247880000000))*(cj2)*(py)*(r00)*(sj2)))+(((IkReal(-1.84206800000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)))+(((IkReal(-6.56000000000000))*(pz)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(0.0304320000000000))*(cj2)*(px)*(pz)*(r00)*(r01)))+(((IkReal(1.84206800000000))*(cj2)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-2.00000000000000))*((pp)*(pp))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.0124771200000000))*(px)*(r02)*(sj2)))+(((IkReal(-1.70802000000000))*(px)*(pz)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-0.0304320000000000))*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(-0.00121728000000000))*(py)*(r01)*(r02)))+(((IkReal(8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-16.0000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-0.00121728000000000))*(pz)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-8.00000000000000))*((cj2)*(cj2))*((px)*(px))*((py)*(py))*((r00)*(r00))))+(((IkReal(-0.0670240000000000))*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(-0.000499084800000000))*(r02)))+(((IkReal(-0.640000000000000))*(px)*(sj2)*((pz)*(pz))*((r00)*(r00))))+(((IkReal(8.00000000000000))*(pp)*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.426063800000000))*(pz)*(r02)))+(((IkReal(0.640000000000000))*(cj2)*(px)*(py)*(pz)*(r00)*(r02)))+(((IkReal(4.00000000000000))*(cj2)*(r00)*(r01)*(sj2)*((pp)*(pp))))+(((IkReal(-1.03918000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(0.262400000000000))*(cj2)*(py)*(pz)*(r02)))+(((IkReal(2.68960000000000))*(cj2)*(px)*(py)*(sj2)))+(((IkReal(-6.56000000000000))*(r02)*((pz)*(pz)*(pz))))+(((IkReal(0.199926128736000))*(cj2)*(r00)*(r01)*(sj2)))+(((IkReal(32.0000000000000))*(cj2)*(r00)*(r01)*(sj2)*((px)*(px))*((py)*(py))))+(((IkReal(0.00569253063200000))*((r02)*(r02))))+(((IkReal(-6.56000000000000))*(r00)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.0897712000000000))*(py)*(r00)*(r01)*(sj2)))+(((IkReal(0.640000000000000))*(cj2)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-1.03918000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.0304320000000000))*(cj2)*(py)*(pz)*((r02)*(r02))))+(((IkReal(-0.00522517440000000))*(r00)*(r02)*(sj2)))+(((IkReal(-8.00000000000000))*(cj2)*(pp)*(px)*(py)*(sj2)*((r01)*(r01))))+(((IkReal(-0.0999630643680000))*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-8.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-8.00000000000000))*((px)*(px)*(px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(32.0000000000000))*(cj2)*(px)*(pz)*(r01)*(r02)*(sj2)*((py)*(py))))+(((IkReal(0.0304320000000000))*(cj2)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(0.640000000000000))*(cj2)*(py)*((px)*(px))*((r00)*(r00))))+(((IkReal(13.1200000000000))*(cj2)*(py)*(r00)*(sj2)*((px)*(px))))+(((IkReal(-1.34480000000000))*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-8.00000000000000))*((cj2)*(cj2))*((py)*(py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-16.0000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.0304320000000000))*(cj2)*(pp)*(r01)*(r02)))+(((IkReal(-1.70802000000000))*(py)*(pz)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(0.109888000000000))*(cj2)*(pz)*(r01)*(r02)))+(((IkReal(8.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02))));
op[3]=((IkReal(-0.0170520640000000))+(((IkReal(-0.435431200000000))*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.165746600000000))*(px)*(r02)*(sj2)))+(((IkReal(0.519880000000000))*(pp)*(r00)*(sj2)))+(((IkReal(0.0108416960000000))*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-0.231584984000000))*(px)*(sj2)*((r00)*(r00))))+(((IkReal(-0.0320000000000000))*(pp)*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(2.07952000000000))*(cj2)*(px)*(py)*(r00)))+(((IkReal(-0.0320000000000000))*(cj2)*(pp)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(0.0216833920000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(0.0320000000000000))*(pp)*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-0.0831808000000000))*(py)*(r01)))+(((IkReal(-0.0332723200000000))*(px)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.0320000000000000))*(pp)*(pz)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-0.0640000000000000))*(py)*(r01)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(0.0108416960000000))*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(0.0640000000000000))*(pz)*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0262400000000000))*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(0.0811520000000000))*(cj2)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-0.231584984000000))*(py)*(r00)*(r01)*(sj2)))+(((IkReal(-2.53600000000000))*(sj2)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(0.0640000000000000))*(px)*(r00)*(r02)*((pz)*(pz))*((sj2)*(sj2))))+(((IkReal(0.165746600000000))*(cj2)*(pz)*(r01)))+(((IkReal(0.0332723200000000))*(cj2)*(py)*(r00)*(sj2)))+(((IkReal(0.121728000000000))*(px)*(pz)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-0.0640000000000000))*(r01)*(r02)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(0.0640000000000000))*(py)*(r01)*(r02)*((cj2)*(cj2))*((pz)*(pz))))+(((IkReal(-0.128000000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-0.165746600000000))*(pz)*(r00)*(sj2)))+(((IkReal(2.53600000000000))*(cj2)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-2.53600000000000))*(r00)*(r02)*(sj2)*((pz)*(pz)*(pz))))+(((IkReal(-0.404260000000000))*(px)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(-0.0640000000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.0949498434400000))*(cj2)*(r01)))+(((IkReal(0.0694114420000000))*(cj2)*(r01)*(r02)))+(((IkReal(0.0405760000000000))*(pp)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.0640000000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(-0.0524800000000000))*(r02)*((pz)*(pz))))+(((IkReal(0.435431200000000))*(cj2)*(pz)*(r01)*(r02)))+(((IkReal(-0.101440000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.0405760000000000))*(pp)*((r02)*(r02))))+(((IkReal(0.0262400000000000))*(py)*(pz)*(r01)*((cj2)*(cj2))))+(((IkReal(-1.26800000000000))*(pp)*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-0.426301600000000))*(px)*(sj2)))+(((IkReal(0.0320000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(2.53600000000000))*(cj2)*(pz)*(r01)*(r02)*((py)*(py))))+(((IkReal(-0.0811520000000000))*(px)*(py)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(1.03976000000000))*(cj2)*(r01)*((pz)*(pz))))+(((IkReal(0.0811520000000000))*(cj2)*(px)*(py)*(sj2)*((r00)*(r00))))+(((IkReal(0.202880000000000))*(cj2)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(0.00655819744000000))*((r02)*(r02))))+(((IkReal(0.404260000000000))*(cj2)*(px)*(pz)*(r00)*(r01)))+(((IkReal(0.121728000000000))*(py)*(pz)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-2.53600000000000))*(cj2)*(pp)*(pz)*(r01)*(r02)))+(((IkReal(0.202880000000000))*(cj2)*(px)*(py)*(sj2)*((r02)*(r02))))+(((IkReal(-0.0694114420000000))*(r00)*(r02)*(sj2)))+(((IkReal(0.0405760000000000))*(pp)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(2.53600000000000))*(cj2)*(px)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-0.0640000000000000))*(r00)*(r02)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.0811520000000000))*(px)*(py)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(0.0524800000000000))*(cj2)*(px)*(py)*(r02)*(sj2)))+(((IkReal(-0.0262400000000000))*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-0.0218304960000000))*(py)*(r01)*(r02)))+(((IkReal(-1.26800000000000))*(cj2)*(pp)*(py)*((r01)*(r01))))+(((IkReal(-0.0640000000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-0.101440000000000))*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(-0.0811520000000000))*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-1.26800000000000))*(cj2)*(pp)*(px)*(r00)*(r01)))+(((IkReal(0.404260000000000))*(cj2)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-0.0640000000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(0.231584984000000))*(cj2)*(px)*(r00)*(r01)))+(((IkReal(-0.404260000000000))*(px)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(-0.0108416960000000))*(cj2)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0831808000000000))*(px)*(r00)))+(((IkReal(-2.53600000000000))*(px)*(sj2)*((py)*(py))*((r01)*(r01))))+(((IkReal(-2.07952000000000))*(r00)*(sj2)*((px)*(px))))+(((IkReal(-0.404260000000000))*(px)*(py)*(r01)*(r02)*(sj2)))+(((IkReal(-0.101440000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.00737560096000000))*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-0.202880000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(1.26800000000000))*(pp)*(px)*(sj2)*((r00)*(r00))))+(((IkReal(0.0147512019200000))*(cj2)*(r00)*(r01)*(sj2)))+(((IkReal(-0.0640000000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0640000000000000))*(pz)*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(0.0640000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(0.0811520000000000))*(cj2)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(1.26800000000000))*(cj2)*(pp)*(py)*((r02)*(r02))))+(((IkReal(0.128000000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(0.404260000000000))*(cj2)*(px)*(py)*(r00)*(r02)))+(((IkReal(0.203846216000000))*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-0.0332723200000000))*(py)*(r01)*((cj2)*(cj2))))+(((IkReal(5.07200000000000))*(cj2)*(px)*(r00)*(r01)*((py)*(py))))+(((IkReal(-0.0108416960000000))*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.519880000000000))*(cj2)*(pp)*(r01)))+(((IkReal(-0.0202880000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(1.03976000000000))*(cj2)*(py)*(pz)*(r02)))+(((IkReal(-0.404260000000000))*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(2.07952000000000))*(cj2)*(r01)*((py)*(py))))+(((IkReal(-5.07200000000000))*(py)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-0.0949498434400000))*(r00)*(sj2)))+(((IkReal(-2.07952000000000))*(px)*(py)*(r01)*(sj2)))+(((IkReal(-0.00895050336000000))*(r02)))+(((IkReal(-2.53600000000000))*(py)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(-0.0108416960000000))*(pz)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-0.404260000000000))*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(2.53600000000000))*(cj2)*(py)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.0640000000000000))*(cj2)*(pp)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(-0.0524800000000000))*(py)*(pz)*(r01)))+(((IkReal(0.0332723200000000))*(cj2)*(px)*(r01)*(sj2)))+(((IkReal(-0.404260000000000))*(py)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(-0.0640000000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(0.404260000000000))*(cj2)*(py)*(pz)*((r01)*(r01))))+(((IkReal(-0.0262400000000000))*(cj2)*(px)*(pz)*(r01)*(sj2)))+(((IkReal(0.0640000000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(-0.0811520000000000))*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.121728000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.426301600000000))*(cj2)*(py)))+(((IkReal(0.404260000000000))*(cj2)*(r01)*(r02)*((py)*(py))))+(((IkReal(-2.53600000000000))*(px)*(py)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-0.0262400000000000))*(cj2)*(py)*(pz)*(r00)*(sj2)))+(((IkReal(-0.0108416960000000))*(cj2)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(0.128000000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(-0.101440000000000))*((pz)*(pz))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-1.03976000000000))*(r00)*(sj2)*((pz)*(pz))))+(((IkReal(-0.0218304960000000))*(pz)*((r02)*(r02))))+(((IkReal(0.0131200000000000))*(pp)*(r02)))+(((IkReal(0.404260000000000))*(cj2)*(py)*(pz)*((r02)*(r02))))+(((IkReal(2.53600000000000))*(cj2)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.0320000000000000))*(cj2)*(pp)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0640000000000000))*(px)*(r00)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-0.0640000000000000))*(pz)*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(0.404260000000000))*(pp)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0640000000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(-0.0640000000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(-0.128000000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(-0.404260000000000))*(cj2)*(pp)*(r01)*(r02)))+(((IkReal(-1.03976000000000))*(px)*(pz)*(r02)*(sj2)))+(((IkReal(-0.0524800000000000))*(px)*(pz)*(r00)))+(((IkReal(-0.121728000000000))*(cj2)*(py)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(2.53600000000000))*(cj2)*(px)*(py)*(pz)*(r00)*(r02)))+(((IkReal(-0.101440000000000))*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(0.231584984000000))*(cj2)*(py)*((r01)*(r01))))+(((IkReal(0.0640000000000000))*(pz)*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.0320000000000000))*(pp)*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(0.0811520000000000))*(cj2)*(px)*(py)*(sj2)*((r01)*(r01))))+(((IkReal(0.0262400000000000))*(px)*(pz)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.0640000000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r01)*(r01))))+(((IkReal(-0.0811520000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)))+(((IkReal(-2.53600000000000))*(px)*(sj2)*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-0.128000000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(0.0320000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(2.53600000000000))*(cj2)*(py)*((px)*(px))*((r00)*(r00))))+(((IkReal(-0.0499084800000000))*(pz)*(r02)))+(((IkReal(0.128000000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)*((py)*(py))))+(((IkReal(0.0320000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-0.0107584000000000))*(pz)))+(((IkReal(-0.203846216000000))*(cj2)*(py)*((r02)*(r02))))+(((IkReal(1.26800000000000))*(pp)*(py)*(r00)*(r01)*(sj2)))+(((IkReal(-0.121728000000000))*(cj2)*(px)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(2.53600000000000))*(pp)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0218304960000000))*(px)*(r00)*(r02)))+(((IkReal(0.165746600000000))*(cj2)*(py)*(r02)))+(((IkReal(-0.121728000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-0.101440000000000))*((cj2)*(cj2))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.00737560096000000))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-2.53600000000000))*(pz)*(r00)*(r02)*(sj2)*((px)*(px)))));
op[4]=((IkReal(-0.0177636313000000))+(((IkReal(-0.0866518600000000))*(py)*(r01)))+(((IkReal(-1.26800000000000))*(r01)*(r02)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(0.0644640000000000))*(cj2)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(1.26800000000000))*(pz)*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.0322320000000000))*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(-0.0467262945200000))*(r02)))+(((IkReal(-0.634000000000000))*(pp)*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.377204100000000))*(pz)*(r02)))+(((IkReal(-0.518054000000000))*(px)*(py)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(1.26800000000000))*(py)*(r01)*(r02)*((cj2)*(cj2))*((pz)*(pz))))+(((IkReal(1.03976000000000))*(cj2)*(px)*(py)*(r02)*(sj2)))+(((IkReal(-0.0150589772640000))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.634000000000000))*(cj2)*(pp)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(8.00000000000000))*(cj2)*(px)*(py)*(sj2)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((cj2)*(cj2))*((px)*(px))*((py)*(py))*((r00)*(r00))))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-0.518054000000000))*(px)*(py)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(-1.26800000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(-0.288000000000000))*(px)*(sj2)*((pz)*(pz))*((r00)*(r00))))+(((IkReal(-2.53600000000000))*(px)*(py)*(pz)*(r00)*(r01)))+(((IkReal(-0.103749028000000))*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-1.26800000000000))*(pz)*((py)*(py))*((r01)*(r01))))+(((IkReal(-3.28000000000000))*(r00)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.453590000000000))*(px)*(pz)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(-4.00000000000000))*((px)*(px))*((pz)*(pz))*((r00)*(r00))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(0.576000000000000))*(cj2)*(px)*(r00)*(r01)*((py)*(py))))+(((IkReal(0.634000000000000))*(pp)*(px)*(r00)*(r02)))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(py)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(-0.105673000000000))*((py)*(py))*((r01)*(r01))))+(((IkReal(-1.26800000000000))*(pz)*((px)*(px))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(-0.0456480000000000))*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(-0.144000000000000))*(cj2)*(pp)*(px)*(r00)*(r01)))+(((IkReal(-0.211346000000000))*(px)*(py)*(r00)*(r01)))+(((IkReal(-0.576000000000000))*(py)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(0.0235644480000000))*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-0.00783776160000000))*(r00)*(r02)*(sj2)))+(((IkReal(-3.28000000000000))*(py)*(r01)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.672400000000000))*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-8.00000000000000))*(px)*(pz)*(r00)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-0.519880000000000))*(cj2)*(py)*(pz)*(r00)*(sj2)))+(((IkReal(-0.144000000000000))*(cj2)*(pp)*(py)*((r01)*(r01))))+(((IkReal(2.53600000000000))*(cj2)*(py)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(0.103749028000000))*(cj2)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(0.103749028000000))*(pz)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-2.53600000000000))*(py)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-0.519880000000000))*(cj2)*(px)*(pz)*(r01)*(sj2)))+(((IkReal(0.259027000000000))*(pp)*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))*((pp)*(pp))*((r01)*(r01))))+(((IkReal(0.259027000000000))*(pp)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-1.26800000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(0.0456480000000000))*(cj2)*(px)*(py)*(r00)*(r02)))+(((IkReal(-3.28000000000000))*(py)*(r01)*((pz)*(pz))))+(((IkReal(16.0000000000000))*(cj2)*(px)*(pz)*(r01)*(r02)*(sj2)*((py)*(py))))+(((IkReal(-0.212402140000000))*(px)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.453590000000000))*(py)*(pz)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(0.634000000000000))*(pp)*(px)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(0.0301179545280000))*(cj2)*(r00)*(r01)*(sj2)))+(((IkReal(-1.26800000000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-0.118080000000000))*(px)*(pz)*(r02)*(sj2)))+(((IkReal(-0.0456480000000000))*(px)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(px)*(py)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(0.144000000000000))*(pp)*(py)*(r00)*(r01)*(sj2)))+(((IkReal(0.288000000000000))*(cj2)*(py)*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.144000000000000))*(cj2)*(pp)*(py)*((r02)*(r02))))+(((IkReal(-1.26800000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(-1.26800000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r01)*(r01))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)))+(((IkReal(0.0456480000000000))*(cj2)*(r01)*(r02)*((py)*(py))))+(((IkReal(-0.518054000000000))*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(1.64000000000000))*(pp)*(py)*(r01)*((cj2)*(cj2))))+(((IkReal(-0.113966572000000))*(pz)*((r02)*(r02))))+(((IkReal(-8.00000000000000))*(py)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.0258851520000000))*(py)*(r00)*(r01)*(sj2)))+(((IkReal(8.00000000000000))*(cj2)*(py)*(sj2)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-3.28000000000000))*(px)*(r00)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(16.0000000000000))*(cj2)*(py)*(pz)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(0.118080000000000))*(cj2)*(r01)*((pz)*(pz))))+(((IkReal(0.518054000000000))*(cj2)*(r00)*(r01)*(sj2)*((py)*(py))))+(((IkReal(-0.0322320000000000))*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(px)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-0.0494496000000000))*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(-0.920010000000000))*(px)*(pz)*(r00)*(r02)))+(((IkReal(-3.28000000000000))*(px)*(r00)*((pz)*(pz))))+(((IkReal(4.00000000000000))*(pp)*(py)*(pz)*(r01)*(r02)))+(((IkReal(0.453590000000000))*(cj2)*(px)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(0.0484128000000000))*(cj2)*(py)))+(((IkReal(0.0456480000000000))*(cj2)*(py)*(pz)*((r01)*(r01))))+(((IkReal(-0.518054000000000))*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.0456480000000000))*(px)*(py)*(r01)*(r02)*(sj2)))+(((IkReal(-0.288000000000000))*(py)*(r00)*(r01)*(sj2)*((pz)*(pz))))+(((IkReal(-0.144000000000000))*(pp)*(px)*(sj2)*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((px)*(px))*((pz)*(pz))*((r02)*(r02))*((sj2)*(sj2))))+(((IkReal(0.288000000000000))*(cj2)*(py)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.0187156800000000))*(cj2)*(py)*(r02)))+(((IkReal(-0.0866518600000000))*(px)*(r00)))+(((IkReal(-1.26800000000000))*(pz)*((cj2)*(cj2))*((py)*(py))*((r02)*(r02))))+(((IkReal(2.53600000000000))*(cj2)*(px)*(r01)*(r02)*(sj2)*((py)*(py))))+(((IkReal(-0.0484128000000000))*(px)*(sj2)))+(((IkReal(0.519880000000000))*(px)*(pz)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.207498056000000))*(cj2)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(0.518054000000000))*(cj2)*(px)*(py)*(sj2)*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(pz)*(r01)*(r02)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(8.00000000000000))*(cj2)*(px)*(sj2)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.288000000000000))*(pz)*(r00)*(r02)*(sj2)*((px)*(px))))+(((IkReal(0.288000000000000))*(cj2)*(px)*(py)*(pz)*(r00)*(r02)))+(((IkReal(0.144000000000000))*(pp)*(px)*(sj2)*((r00)*(r00))))+(((IkReal(-0.519880000000000))*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-1.26800000000000))*(px)*(r00)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-0.0322320000000000))*((cj2)*(cj2))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(-0.0322320000000000))*((pz)*(pz))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-0.113966572000000))*(px)*(r00)*(r02)))+(((IkReal(-4.00000000000000))*((px)*(px)*(px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(px)*(py)*(sj2)*((r01)*(r01))))+(((IkReal(0.518054000000000))*(cj2)*(px)*(py)*(sj2)*((r00)*(r00))))+(((IkReal(-3.28000000000000))*(pz)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-1.26800000000000))*(r00)*(r02)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(-4.00000000000000))*((cj2)*(cj2))*((py)*(py))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.0456480000000000))*(pp)*(r00)*(r02)*(sj2)))+(((IkReal(-0.0456480000000000))*(py)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(0.354332000000000))*(pp)*((r02)*(r02))))+(((IkReal(0.0187156800000000))*(cj2)*(pz)*(r01)))+(((IkReal(-4.00000000000000))*((pz)*(pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(4.00000000000000))*(pp)*(px)*(py)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(-1.26800000000000))*(pz)*((px)*(px))*((r00)*(r00))))+(((IkReal(0.518054000000000))*(cj2)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(0.0258851520000000))*(cj2)*(py)*((r01)*(r01))))+(((IkReal(-0.0590400000000000))*(cj2)*(pp)*(r01)))+(((IkReal(6.56000000000000))*(cj2)*(px)*(py)*(pz)*(r02)*(sj2)))+(((IkReal(-1.64000000000000))*(cj2)*(pp)*(px)*(r01)*(sj2)))+(((IkReal(1.26800000000000))*(px)*(r00)*(r02)*((pz)*(pz))*((sj2)*(sj2))))+(((IkReal(-0.213150800000000))*(pz)))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)*((px)*(px))))+(((IkReal(-0.288000000000000))*(r00)*(r02)*(sj2)*((pz)*(pz)*(pz))))+(((IkReal(-0.288000000000000))*(cj2)*(pp)*(pz)*(r01)*(r02)))+(((IkReal(0.288000000000000))*(cj2)*(pz)*(r01)*(r02)*((py)*(py))))+(((IkReal(-0.236160000000000))*(px)*(py)*(r01)*(sj2)))+(((IkReal(-3.28000000000000))*(r02)*((pz)*(pz)*(pz))))+(((IkReal(1.34480000000000))*(cj2)*(px)*(py)*(sj2)))+(((IkReal(4.00000000000000))*(pp)*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.0456480000000000))*(cj2)*(pp)*(r01)*(r02)))+(((IkReal(-1.64000000000000))*(cj2)*(pp)*(py)*(r00)*(sj2)))+(((IkReal(-0.672400000000000))*((pz)*(pz))))+(((IkReal(2.00000000000000))*(cj2)*(r00)*(r01)*(sj2)*((pp)*(pp))))+(((IkReal(0.288000000000000))*(cj2)*((py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-0.0150589772640000))*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-0.0187156800000000))*(pz)*(r00)*(sj2)))+(((IkReal(-0.288000000000000))*(px)*(py)*(pz)*(r01)*(r02)*(sj2)))+(((IkReal(-0.0187156800000000))*(px)*(r02)*(sj2)))+(((IkReal(-1.00000000000000))*((pp)*(pp))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(0.288000000000000))*(cj2)*(r01)*(r02)*((pz)*(pz)*(pz))))+(((IkReal(-0.236160000000000))*(r00)*(sj2)*((px)*(px))))+(((IkReal(4.00000000000000))*(pp)*(px)*(pz)*(r00)*(r02)*((sj2)*(sj2))))+(((IkReal(0.634000000000000))*(pp)*(pz)*((r02)*(r02))))+(((IkReal(-0.103749028000000))*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-1.26800000000000))*(py)*(r01)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(0.103749028000000))*(cj2)*(py)*(r00)*(r02)*(sj2)))+(((IkReal(0.118080000000000))*(cj2)*(py)*(pz)*(r02)))+(((IkReal(-1.03976000000000))*(px)*(pz)*(r00)))+(((IkReal(-8.00000000000000))*(px)*(r00)*(r01)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(-4.00000000000000))*((cj2)*(cj2))*((py)*(py)*(py)*(py))*((r01)*(r01))))+(((IkReal(-1.26800000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(py)*(pz)*(r01)*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(0.236160000000000))*(cj2)*(px)*(py)*(r00)))+(((IkReal(1.26800000000000))*(px)*(py)*(pz)*(r00)*(r01)*((sj2)*(sj2))))+(((IkReal(-3.28000000000000))*(pz)*(r02)*((cj2)*(cj2))*((py)*(py))))+(((IkReal(-0.0314228457640000))*((r02)*(r02))))+(((IkReal(-1.26800000000000))*((pz)*(pz)*(pz))*((r02)*(r02))))+(((IkReal(-4.00000000000000))*((py)*(py))*((pz)*(pz))*((r01)*(r01))))+(((IkReal(0.634000000000000))*(pp)*(py)*(r01)*(r02)*((cj2)*(cj2))))+(((IkReal(-0.118080000000000))*(r00)*(sj2)*((pz)*(pz))))+(((IkReal(0.453590000000000))*(cj2)*(py)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(0.212402140000000))*(cj2)*(py)*(r00)*(sj2)))+(((IkReal(-0.288000000000000))*(px)*(sj2)*((py)*(py))*((r01)*(r01))))+(((IkReal(-8.00000000000000))*(pz)*(r00)*(r02)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(0.0494496000000000))*(cj2)*(pz)*(r01)*(r02)))+(((IkReal(0.288000000000000))*(cj2)*(px)*(r00)*(r01)*((pz)*(pz))))+(((IkReal(-2.53600000000000))*(px)*(r00)*(r02)*((pz)*(pz))))+(((IkReal(0.0456480000000000))*(cj2)*(py)*(pz)*((r02)*(r02))))+(((IkReal(-0.519880000000000))*(r02)*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.105673000000000))*((px)*(px))*((r00)*(r00))))+(((IkReal(6.56000000000000))*(cj2)*(py)*(r00)*(sj2)*((px)*(px))))+(((IkReal(-0.113966572000000))*(py)*(r01)*(r02)))+(((IkReal(-0.0258851520000000))*(px)*(sj2)*((r00)*(r00))))+(((IkReal(-1.03976000000000))*(py)*(pz)*(r01)))+(((IkReal(0.0644640000000000))*(cj2)*(px)*(py)*(sj2)*((r02)*(r02))))+(((IkReal(-0.288000000000000))*(sj2)*((px)*(px)*(px))*((r00)*(r00))))+(((IkReal(-8.00000000000000))*(py)*(r00)*(r01)*((px)*(px)*(px))*((sj2)*(sj2))))+(((IkReal(0.259940000000000))*(pp)*(r02)))+(((IkReal(-0.634000000000000))*(cj2)*(pp)*(px)*(r01)*(r02)*(sj2)))+(((IkReal(1.26800000000000))*(px)*(py)*(pz)*(r00)*(r01)*((cj2)*(cj2))))+(((IkReal(0.0456480000000000))*(cj2)*(r01)*(r02)*((pz)*(pz))))+(((IkReal(-0.0106129123200000))*(r00)*(sj2)))+(((IkReal(0.0258851520000000))*(cj2)*(px)*(r00)*(r01)))+(((IkReal(0.236160000000000))*(cj2)*(r01)*((py)*(py))))+(((IkReal(0.519880000000000))*(py)*(pz)*(r01)*((cj2)*(cj2))))+(((IkReal(-0.0456480000000000))*(r00)*(r02)*(sj2)*((pz)*(pz))))+(((IkReal(-0.0456480000000000))*(px)*(pz)*(sj2)*((r00)*(r00))))+(((IkReal(1.26800000000000))*(pz)*((cj2)*(cj2))*((py)*(py))*((r01)*(r01))))+(((IkReal(-0.518054000000000))*(cj2)*(pp)*(r00)*(r01)*(sj2)))+(((IkReal(1.26800000000000))*(cj2)*(pp)*(pz)*(r00)*(r01)*(sj2)))+(((IkReal(4.00000000000000))*(pp)*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.288000000000000))*(pp)*(pz)*(r00)*(r02)*(sj2)))+(((IkReal(0.0590400000000000))*(pp)*(r00)*(sj2)))+(((IkReal(0.212402140000000))*(cj2)*(px)*(r01)*(sj2)))+(((IkReal(-0.212402140000000))*(py)*(r01)*((cj2)*(cj2))))+(((IkReal(0.0456480000000000))*(cj2)*(px)*(pz)*(r00)*(r01)))+(((IkReal(-0.634000000000000))*(pp)*(pz)*((cj2)*(cj2))*((r01)*(r01))))+(((IkReal(-0.814337000000000))*((pz)*(pz))*((r02)*(r02))))+(((IkReal(0.634000000000000))*(pp)*(py)*(r01)*(r02)))+(((IkReal(-1.03976000000000))*(r02)*((pz)*(pz))))+(((IkReal(0.00783776160000000))*(cj2)*(r01)*(r02)))+(((IkReal(16.0000000000000))*(cj2)*(r00)*(r01)*(sj2)*((px)*(px))*((py)*(py))))+(((IkReal(2.53600000000000))*(cj2)*(px)*(py)*(pz)*(sj2)*((r02)*(r02))))+(((IkReal(-0.0235644480000000))*(cj2)*(py)*((r02)*(r02))))+(((IkReal(-3.28000000000000))*(r01)*((cj2)*(cj2))*((py)*(py)*(py))))+(((IkReal(-4.00000000000000))*((px)*(px))*((py)*(py))*((r01)*(r01))*((sj2)*(sj2))))+(((IkReal(6.56000000000000))*(cj2)*(px)*(r01)*(sj2)*((py)*(py))))+(((IkReal(1.64000000000000))*(pp)*(pz)*(r02)))+(((IkReal(4.00000000000000))*(pp)*((px)*(px))*((r00)*(r00))*((sj2)*(sj2))))+(((IkReal(1.64000000000000))*(pp)*(px)*(r00)*((sj2)*(sj2))))+(((IkReal(-0.672400000000000))*((px)*(px))*((sj2)*(sj2))))+(((IkReal(-0.920010000000000))*(py)*(pz)*(r01)*(r02)))+(((IkReal(-4.00000000000000))*(cj2)*(pp)*(px)*(py)*(sj2)*((r00)*(r00))))+(((IkReal(0.0106129123200000))*(cj2)*(r01)))+(((IkReal(0.103749028000000))*(pz)*((cj2)*(cj2))*((r01)*(r01)))));
polyroots4(op,zeror,numroots);
IkReal j3array[4], cj3array[4], sj3array[4], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((IkReal(2.00000000000000))*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[4]={true,true,true,true};
_nj3 = 4;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
sj6array[0]=((((IkReal(16.6666666666667))*(py)*(sj2)))+(((IkReal(16.6666666666667))*(cj2)*(px))));
if( sj6array[0] >= -1-IKFAST_SINCOS_THRESH && sj6array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j6valid[0] = j6valid[1] = true;
    j6array[0] = IKasin(sj6array[0]);
    cj6array[0] = IKcos(j6array[0]);
    sj6array[1] = sj6array[0];
    j6array[1] = j6array[0] > 0 ? (IKPI-j6array[0]) : (-IKPI-j6array[0]);
    cj6array[1] = -cj6array[0];
}
else if( isnan(sj6array[0]) )
{
    // probably any value will work
    j6valid[0] = true;
    cj6array[0] = 1; sj6array[0] = 0; j6array[0] = 0;
}
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x36=((IkReal(7.38007380073801))*(r00));
IkReal x37=((IkReal(0.0295202952029520))*(cj3));
IkReal x38=((cj2)*(r01));
IkReal x39=((IkReal(7.38007380073801))*(r02));
IkReal x40=((IkReal(1.16974169741697))*(cj3));
IkReal x41=((r00)*(sj2));
IkReal x42=((IkReal(0.0295202952029520))*(sj3));
IkReal x43=((IkReal(1.16974169741697))*(sj3));
IkReal x44=((IkReal(1.16974169741697))*(x41));
if( IKabs(((((IkReal(-1.00000000000000))*(r02)*(x43)))+(((IkReal(-0.442804428044280))*(cj6)))+(((x41)*(x42)))+(((IkReal(-1.00000000000000))*(x38)*(x42)))+(((IkReal(-1.00000000000000))*(x38)*(x40)))+(((x40)*(x41)))+(((IkReal(-7.38007380073801))*(pz)*(x38)))+(((cj2)*(py)*(x39)))+(((r02)*(x37)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x39)))+(((pz)*(sj2)*(x36)))+(((IkReal(-0.295202952029520))*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(3.02583025830258))+(((IkReal(-1.00000000000000))*(x37)*(x41)))+(((pz)*(x39)))+(((x41)*(x43)))+(((IkReal(-0.202952029520295))*(cj2)*(r00)))+(((x37)*(x38)))+(((IkReal(-1.00000000000000))*(x38)*(x43)))+(((IkReal(-0.295202952029520))*(x38)))+(((IkReal(0.295202952029520))*(x41)))+(((IkReal(7.38007380073801))*(py)*(r01)))+(((IkReal(-0.202952029520295))*(r01)*(sj2)))+(((px)*(x36)))+(((r02)*(x42)))+(((r02)*(x40))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r02)*(x43)))+(((IkReal(-0.442804428044280))*(cj6)))+(((x41)*(x42)))+(((IkReal(-1.00000000000000))*(x38)*(x42)))+(((IkReal(-1.00000000000000))*(x38)*(x40)))+(((x40)*(x41)))+(((IkReal(-7.38007380073801))*(pz)*(x38)))+(((cj2)*(py)*(x39)))+(((r02)*(x37)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x39)))+(((pz)*(sj2)*(x36)))+(((IkReal(-0.295202952029520))*(r02)))))+IKsqr(((IkReal(3.02583025830258))+(((IkReal(-1.00000000000000))*(x37)*(x41)))+(((pz)*(x39)))+(((x41)*(x43)))+(((IkReal(-0.202952029520295))*(cj2)*(r00)))+(((x37)*(x38)))+(((IkReal(-1.00000000000000))*(x38)*(x43)))+(((IkReal(-0.295202952029520))*(x38)))+(((IkReal(0.295202952029520))*(x41)))+(((IkReal(7.38007380073801))*(py)*(r01)))+(((IkReal(-0.202952029520295))*(r01)*(sj2)))+(((px)*(x36)))+(((r02)*(x42)))+(((r02)*(x40)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r02)*(x43)))+(((IkReal(-0.442804428044280))*(cj6)))+(((x41)*(x42)))+(((IkReal(-1.00000000000000))*(x38)*(x42)))+(((IkReal(-1.00000000000000))*(x38)*(x40)))+(((x40)*(x41)))+(((IkReal(-7.38007380073801))*(pz)*(x38)))+(((cj2)*(py)*(x39)))+(((r02)*(x37)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x39)))+(((pz)*(sj2)*(x36)))+(((IkReal(-0.295202952029520))*(r02)))), ((IkReal(3.02583025830258))+(((IkReal(-1.00000000000000))*(x37)*(x41)))+(((pz)*(x39)))+(((x41)*(x43)))+(((IkReal(-0.202952029520295))*(cj2)*(r00)))+(((x37)*(x38)))+(((IkReal(-1.00000000000000))*(x38)*(x43)))+(((IkReal(-0.295202952029520))*(x38)))+(((IkReal(0.295202952029520))*(x41)))+(((IkReal(7.38007380073801))*(py)*(r01)))+(((IkReal(-0.202952029520295))*(r01)*(sj2)))+(((px)*(x36)))+(((r02)*(x42)))+(((r02)*(x40)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x45=IKsin(j5);
IkReal x46=IKcos(j5);
IkReal x47=((cj2)*(r01));
IkReal x48=((IkReal(0.158500000000000))*(sj3));
IkReal x49=((cj3)*(r02));
IkReal x50=((pz)*(r02));
IkReal x51=((IkReal(0.00400000000000000))*(cj3));
IkReal x52=((cj2)*(r00));
IkReal x53=((IkReal(0.0126800000000000))*(sj3));
IkReal x54=((r02)*(sj3));
IkReal x55=((r00)*(sj2));
IkReal x56=((cj2)*(py));
IkReal x57=((IkReal(0.317000000000000))*(sj2));
IkReal x58=((IkReal(0.00871750000000000))*(sj3));
IkReal x59=((px)*(sj3));
IkReal x60=((px)*(sj2));
IkReal x61=((IkReal(0.317000000000000))*(sj3));
IkReal x62=((py)*(r00));
IkReal x63=((IkReal(0.0550000000000000))*(py));
IkReal x64=((IkReal(2.00000000000000))*(py));
IkReal x65=((cj2)*(px));
IkReal x66=((r01)*(sj2));
IkReal x67=((IkReal(1.00000000000000))*(pp));
IkReal x68=((IkReal(0.00400000000000000))*(sj3));
IkReal x69=((IkReal(0.00800000000000000))*(cj3));
IkReal x70=((IkReal(0.000220000000000000))*(cj3));
IkReal x71=((px)*(r00));
IkReal x72=((IkReal(0.000320000000000000))*(cj3));
IkReal x73=((IkReal(0.158500000000000))*(cj3));
IkReal x74=((px)*(r01));
IkReal x75=((IkReal(0.317000000000000))*(cj3)*(pz));
IkReal x76=((IkReal(0.00800000000000000))*(pz)*(sj3));
evalcond[0]=((((IkReal(-1.00000000000000))*(r02)*(x48)))+(((IkReal(-1.00000000000000))*(r02)*(x60)))+(((IkReal(-0.0400000000000000))*(r02)))+(((IkReal(0.00400000000000000))*(x49)))+(((IkReal(-0.0600000000000000))*(cj6)))+(((r02)*(x56)))+(((IkReal(-0.135500000000000))*(x45)))+(((IkReal(-1.00000000000000))*(x47)*(x68)))+(((IkReal(-1.00000000000000))*(pz)*(x47)))+(((IkReal(-1.00000000000000))*(x47)*(x73)))+(((x55)*(x73)))+(((pz)*(x55)))+(((x55)*(x68))));
evalcond[1]=((IkReal(-0.410000000000000))+(((x47)*(x48)))+(((IkReal(-1.00000000000000))*(x48)*(x55)))+(((IkReal(0.0275000000000000))*(x66)))+(((IkReal(0.0275000000000000))*(x52)))+(((IkReal(-1.00000000000000))*(x47)*(x51)))+(((IkReal(-1.00000000000000))*(x71)))+(((x51)*(x55)))+(((IkReal(-1.00000000000000))*(py)*(r01)))+(((IkReal(0.0400000000000000))*(x47)))+(((IkReal(-0.158500000000000))*(x49)))+(((IkReal(-0.00400000000000000))*(x54)))+(((IkReal(0.135500000000000))*(x46)))+(((IkReal(-1.00000000000000))*(x50)))+(((IkReal(-0.0400000000000000))*(x55))));
evalcond[2]=((IkReal(0.163322000000000))+(((sj2)*(x63)))+(((IkReal(0.0162600000000000))*(cj6)*(x45)))+(((IkReal(-1.00000000000000))*(x56)*(x69)))+(((IkReal(-1.00000000000000))*(x75)))+(((IkReal(-1.00000000000000))*(x76)))+(((IkReal(-0.111110000000000))*(x46)))+(((x60)*(x69)))+(((IkReal(0.0550000000000000))*(x65)))+(((IkReal(0.0800000000000000))*(x56)))+(x72)+(((x56)*(x61)))+(((IkReal(-0.00330000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x67)))+(((IkReal(-0.0800000000000000))*(x60)))+(((IkReal(-1.00000000000000))*(x53)))+(((IkReal(-1.00000000000000))*(x57)*(x59))));
evalcond[3]=((IkReal(-0.0225500000000000))+(((IkReal(0.317000000000000))*(x49)*(x65)))+(((IkReal(-1.00000000000000))*(x52)*(x67)))+(((IkReal(-1.00000000000000))*(x66)*(x67)))+(((IkReal(0.00745250000000000))*(x46)))+(((IkReal(0.00800000000000000))*(x54)*(x65)))+(((IkReal(-1.00000000000000))*(x52)*(x53)))+(((IkReal(-1.00000000000000))*(x53)*(x66)))+(((IkReal(0.0492000000000000))*(sj6)))+(((IkReal(-0.000220000000000000))*(x54)))+(((IkReal(-0.0550000000000000))*(x71)))+(((IkReal(-1.00000000000000))*(x66)*(x76)))+(((IkReal(-0.00871750000000000))*(x49)))+(((IkReal(-1.00000000000000))*(x55)*(x58)))+(((px)*(x55)*(x64)))+(((IkReal(-0.0162600000000000))*(sj6)*(x46)))+(((IkReal(0.0800000000000000))*(x62)))+(((x69)*(x74)))+(((IkReal(2.00000000000000))*(x50)*(x65)))+(((IkReal(-0.00220000000000000))*(x55)))+(((x61)*(x62)))+(((IkReal(-1.00000000000000))*(x47)*(x70)))+(((IkReal(-0.0550000000000000))*(x50)))+(((sj2)*(x50)*(x64)))+(((IkReal(-0.0800000000000000))*(x74)))+(((IkReal(-1.00000000000000))*(cj3)*(pz)*(r01)*(x57)))+(((IkReal(-0.0259820000000000))*(x52)))+(((IkReal(-1.00000000000000))*(r01)*(x63)))+(((IkReal(-0.0259820000000000))*(x66)))+(((py)*(x49)*(x57)))+(((IkReal(-1.00000000000000))*(x52)*(x76)))+(((IkReal(-1.00000000000000))*(x52)*(x75)))+(((IkReal(0.00220000000000000))*(x47)))+(((x55)*(x70)))+(((x47)*(x58)))+(((IkReal(2.00000000000000))*(x52)*((px)*(px))))+(((x66)*(x72)))+(((IkReal(0.00800000000000000))*(py)*(sj2)*(x54)))+(((IkReal(-0.317000000000000))*(r01)*(x59)))+(((px)*(x47)*(x64)))+(((x52)*(x72)))+(((py)*(x64)*(x66)))+(((IkReal(-1.00000000000000))*(x62)*(x69))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x77=((IkReal(0.0600000000000000))*(cj6));
gconst1=IKsign(((((IkReal(-0.135500000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x77)*((sj5)*(sj5))))+(((IkReal(-1.00000000000000))*(x77)*((cj5)*(cj5))))));
IkReal x78=((IkReal(1.00000000000000))*(cj6));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x78)*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*(x78)*((sj5)*(sj5))))+(((IkReal(-2.25833333333333))*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x79=((IkReal(0.0400000000000000))*(cj3));
IkReal x80=((IkReal(0.410000000000000))*(cj5));
IkReal x81=((IkReal(0.410000000000000))*(sj5));
IkReal x82=((IkReal(0.0600000000000000))*(cj6));
IkReal x83=((r02)*(sj3));
IkReal x84=((IkReal(1.00000000000000))*(sj5));
IkReal x85=((pz)*(sj3));
IkReal x86=((cj2)*(cj3)*(r01));
IkReal x87=((cj3)*(r00)*(sj2));
IkReal x88=((cj2)*(cj3)*(py));
IkReal x89=((cj3)*(px)*(sj2));
IkReal x90=((x82)*(x83));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x81)*(x83)))+(((IkReal(-1.00000000000000))*(x81)*(x86)))+(((cj5)*(x82)*(x87)))+(((x81)*(x87)))+(((sj5)*(x79)))+(((IkReal(-1.00000000000000))*(cj5)*(x90)))+(((IkReal(-1.00000000000000))*(x84)*(x88)))+(((IkReal(-1.00000000000000))*(x84)*(x85)))+(((IkReal(-1.00000000000000))*(cj5)*(x82)*(x86)))+(((IkReal(-0.00400000000000000))*(sj5)))+(((sj5)*(x89))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(sj5)*(x82)*(x86)))+(((IkReal(-1.00000000000000))*(x80)*(x87)))+(((IkReal(0.135500000000000))*(x87)))+(((IkReal(-0.135500000000000))*(x86)))+(((IkReal(-0.135500000000000))*(x83)))+(((IkReal(-1.00000000000000))*(cj5)*(x89)))+(((IkReal(-1.00000000000000))*(cj5)*(x79)))+(((sj5)*(x82)*(x87)))+(((cj5)*(x88)))+(((cj5)*(x85)))+(((IkReal(0.00400000000000000))*(cj5)))+(((x80)*(x83)))+(((x80)*(x86)))+(((IkReal(-1.00000000000000))*(sj5)*(x90))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(x81)*(x83)))+(((IkReal(-1.00000000000000))*(x81)*(x86)))+(((cj5)*(x82)*(x87)))+(((x81)*(x87)))+(((sj5)*(x79)))+(((IkReal(-1.00000000000000))*(cj5)*(x90)))+(((IkReal(-1.00000000000000))*(x84)*(x88)))+(((IkReal(-1.00000000000000))*(x84)*(x85)))+(((IkReal(-1.00000000000000))*(cj5)*(x82)*(x86)))+(((IkReal(-0.00400000000000000))*(sj5)))+(((sj5)*(x89)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(sj5)*(x82)*(x86)))+(((IkReal(-1.00000000000000))*(x80)*(x87)))+(((IkReal(0.135500000000000))*(x87)))+(((IkReal(-0.135500000000000))*(x86)))+(((IkReal(-0.135500000000000))*(x83)))+(((IkReal(-1.00000000000000))*(cj5)*(x89)))+(((IkReal(-1.00000000000000))*(cj5)*(x79)))+(((sj5)*(x82)*(x87)))+(((cj5)*(x88)))+(((cj5)*(x85)))+(((IkReal(0.00400000000000000))*(cj5)))+(((x80)*(x83)))+(((x80)*(x86)))+(((IkReal(-1.00000000000000))*(sj5)*(x90)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x91=IKsin(j4);
IkReal x92=IKcos(j4);
IkReal x93=(pz)*(pz);
IkReal x94=(px)*(px);
IkReal x95=(py)*(py);
IkReal x96=((px)*(sj2));
IkReal x97=((IkReal(0.317000000000000))*(r02));
IkReal x98=((IkReal(0.0600000000000000))*(cj6));
IkReal x99=((r02)*(sj3));
IkReal x100=((IkReal(1.00000000000000))*(sj3));
IkReal x101=((r01)*(sj2));
IkReal x102=((cj3)*(r00));
IkReal x103=((IkReal(2.00000000000000))*(pz));
IkReal x104=((py)*(sj2));
IkReal x105=((IkReal(0.0400000000000000))*(cj3));
IkReal x106=((IkReal(0.0400000000000000))*(cj2));
IkReal x107=((pz)*(r00));
IkReal x108=((IkReal(0.0550000000000000))*(cj2));
IkReal x109=((IkReal(0.00126800000000000))*(sj2));
IkReal x110=((IkReal(0.00800000000000000))*(r02));
IkReal x111=((IkReal(0.0492000000000000))*(cj6));
IkReal x112=((cj3)*(r02));
IkReal x113=((IkReal(1.00000000000000))*(pp));
IkReal x114=((IkReal(0.0550000000000000))*(cj3));
IkReal x115=((cj2)*(py));
IkReal x116=((px)*(r01));
IkReal x117=((IkReal(0.0800000000000000))*(px));
IkReal x118=((IkReal(2.00000000000000))*(px));
IkReal x119=((cj2)*(r01));
IkReal x120=((IkReal(0.0162600000000000))*(cj6));
IkReal x121=((IkReal(0.0550000000000000))*(sj3));
IkReal x122=((py)*(r00));
IkReal x123=((IkReal(0.0800000000000000))*(pz));
IkReal x124=((IkReal(0.0275000000000000))*(sj3));
IkReal x125=((IkReal(0.00330000000000000))*(sj6));
IkReal x126=((r00)*(sj2));
IkReal x127=((cj2)*(r00));
IkReal x128=((IkReal(0.0400000000000000))*(sj3));
IkReal x129=((IkReal(1.00000000000000))*(cj3));
IkReal x130=((py)*(r01));
IkReal x131=((IkReal(0.0600000000000000))*(sj6));
IkReal x132=((r00)*(sj3));
IkReal x133=((IkReal(0.0259500000000000))*(sj3));
IkReal x134=((IkReal(2.00000000000000))*(sj3));
IkReal x135=((IkReal(0.00220000000000000))*(sj3));
IkReal x136=((cj2)*(px));
IkReal x137=((px)*(r00));
IkReal x138=((cj5)*(x91));
IkReal x139=((IkReal(2.00000000000000))*(x93));
IkReal x140=((py)*(x129));
IkReal x141=((sj3)*(x130));
IkReal x142=((sj5)*(x92));
IkReal x143=((sj5)*(x91));
IkReal x144=((cj3)*(x130));
IkReal x145=((cj5)*(x92));
IkReal x146=((sj6)*(x143));
evalcond[0]=((((IkReal(-1.00000000000000))*(x119)*(x129)))+(((sj2)*(x102)))+(x142)+(x138)+(((IkReal(-1.00000000000000))*(x99))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x100)*(x126)))+(((sj3)*(x119)))+(x143)+(((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(x112))));
evalcond[2]=((IkReal(-0.00400000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x100)))+(((IkReal(0.135500000000000))*(x91)))+(((IkReal(-1.00000000000000))*(x115)*(x129)))+(((IkReal(-0.410000000000000))*(x138)))+(((cj3)*(x96)))+(x105)+(((IkReal(-0.410000000000000))*(x142)))+(((x143)*(x98)))+(((IkReal(-1.00000000000000))*(x145)*(x98))));
evalcond[3]=((IkReal(-0.158500000000000))+(((sj3)*(x115)))+(((IkReal(-1.00000000000000))*(pz)*(x129)))+(((IkReal(-0.135500000000000))*(x92)))+(((IkReal(-1.00000000000000))*(x128)))+(((IkReal(-1.00000000000000))*(x142)*(x98)))+(((IkReal(-0.410000000000000))*(x143)))+(((IkReal(0.410000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(x138)*(x98)))+(((IkReal(-1.00000000000000))*(x100)*(x96))));
evalcond[4]=((((cj2)*(pz)*(x102)))+(((IkReal(-1.00000000000000))*(x119)*(x124)))+(((x101)*(x128)))+(((x131)*(x143)))+(((IkReal(-1.00000000000000))*(x100)*(x122)))+(((sj3)*(x116)))+(((IkReal(-1.00000000000000))*(x131)*(x145)))+(((IkReal(0.0275000000000000))*(x112)))+(((x106)*(x132)))+(((IkReal(0.0275000000000000))*(x145)))+(((cj3)*(pz)*(x101)))+(((x124)*(x126)))+(((IkReal(0.158500000000000))*(x101)))+(((IkReal(-0.0275000000000000))*(x143)))+(((IkReal(0.158500000000000))*(x127)))+(((IkReal(-1.00000000000000))*(x104)*(x112)))+(((IkReal(-1.00000000000000))*(x112)*(x136))));
evalcond[5]=((((cj3)*(x116)))+(((IkReal(-0.00400000000000000))*(x127)))+(((IkReal(0.0275000000000000))*(x138)))+(((IkReal(-1.00000000000000))*(x131)*(x142)))+(((IkReal(-0.00400000000000000))*(x101)))+(((x136)*(x99)))+(((IkReal(0.0275000000000000))*(x142)))+(((x102)*(x106)))+(((IkReal(0.0275000000000000))*(sj2)*(x102)))+(((IkReal(-0.0275000000000000))*(x99)))+(((IkReal(-1.00000000000000))*(cj2)*(x100)*(x107)))+(((IkReal(-1.00000000000000))*(py)*(x102)))+(((IkReal(-0.0275000000000000))*(cj3)*(x119)))+(((IkReal(-1.00000000000000))*(pz)*(x100)*(x101)))+(((x101)*(x105)))+(((IkReal(-1.00000000000000))*(x131)*(x138)))+(((x104)*(x99))));
evalcond[6]=((((IkReal(-1.00000000000000))*(pz)*(x101)*(x121)))+(((IkReal(-0.0800000000000000))*(x144)))+(((IkReal(-2.00000000000000))*(sj2)*(x102)*(x94)))+(((IkReal(0.00126800000000000))*(x112)))+(((IkReal(-0.317000000000000))*(pz)*(x119)))+(((x102)*(x115)*(x118)))+(((IkReal(-0.000220000000000000))*(x127)))+(((px)*(x108)*(x99)))+(((x103)*(x141)))+(((IkReal(-1.00000000000000))*(x125)*(x142)))+(((pz)*(x110)))+(((x114)*(x116)))+(((IkReal(-1.00000000000000))*(x113)*(x99)))+(((IkReal(-1.00000000000000))*(x112)*(x123)))+(((IkReal(-1.00000000000000))*(cj3)*(x113)*(x119)))+(((IkReal(-0.000220000000000000))*(x101)))+(((IkReal(0.00800000000000000))*(x137)))+(((IkReal(0.00800000000000000))*(x130)))+(((x103)*(x112)*(x115)))+(((IkReal(-0.00126800000000000))*(sj3)*(x119)))+(((IkReal(0.0242625000000000))*(sj2)*(x102)))+(((px)*(x103)*(x132)))+(((IkReal(-1.00000000000000))*(x103)*(x112)*(x96)))+(((IkReal(-1.00000000000000))*(sj3)*(x119)*(x123)))+(((IkReal(-0.0550000000000000))*(py)*(x102)))+(((IkReal(-0.0274625000000000))*(x99)))+(((IkReal(-0.182104000000000))*(x138)))+(((x111)*(x143)))+(((x109)*(x132)))+(((x139)*(x99)))+(((IkReal(0.0800000000000000))*(sj2)*(sj3)*(x107)))+(((IkReal(0.00220000000000000))*(cj3)*(x101)))+(((IkReal(-1.00000000000000))*(x125)*(x138)))+(((IkReal(-2.00000000000000))*(x144)*(x96)))+(((IkReal(0.0550000000000000))*(x104)*(x99)))+(((IkReal(-0.000320000000000000))*(x119)))+(((IkReal(-0.0800000000000000))*(x96)*(x99)))+(((x115)*(x97)))+(((IkReal(-0.145383500000000))*(x142)))+(((IkReal(0.00220000000000000))*(cj2)*(x102)))+(((IkReal(0.000320000000000000))*(x126)))+(((IkReal(0.111110000000000))*(x91)))+(((IkReal(-0.0242625000000000))*(cj3)*(x119)))+(((IkReal(-1.00000000000000))*(x102)*(x117)))+(((IkReal(0.0800000000000000))*(x115)*(x99)))+(((IkReal(-0.0126800000000000))*(r02)))+(((IkReal(-1.00000000000000))*(x111)*(x145)))+(((x120)*(x92)))+(((IkReal(-1.00000000000000))*(sj3)*(x107)*(x108)))+(((IkReal(-1.00000000000000))*(x96)*(x97)))+(((pp)*(sj2)*(x102)))+(((IkReal(2.00000000000000))*(cj3)*(x119)*(x95)))+(((IkReal(0.317000000000000))*(sj2)*(x107))));
evalcond[7]=((((IkReal(-1.00000000000000))*(pp)*(x100)*(x126)))+(((x112)*(x139)))+(((IkReal(-1.00000000000000))*(x112)*(x113)))+(((IkReal(-1.00000000000000))*(x101)*(x135)))+(((IkReal(-0.00871750000000000))*(x127)))+(((x117)*(x132)))+(((x121)*(x122)))+(((IkReal(0.00126800000000000))*(cj3)*(x119)))+(((IkReal(0.0550000000000000))*(x104)*(x112)))+(((x103)*(x144)))+(((IkReal(-1.00000000000000))*(x111)*(x138)))+(((IkReal(-1.00000000000000))*(x125)*(x143)))+(((IkReal(-1.00000000000000))*(pz)*(x102)*(x108)))+(((IkReal(0.00800000000000000))*(pz)*(x119)))+(((x130)*(x134)*(x96)))+(((IkReal(-0.00871750000000000))*(x101)))+(((px)*(x102)*(x103)))+(((IkReal(-0.111110000000000))*(x92)))+(((IkReal(-1.00000000000000))*(x116)*(x121)))+(((IkReal(-0.0126800000000000))*(x119)))+(((sj2)*(x102)*(x123)))+(((IkReal(-1.00000000000000))*(x110)*(x115)))+(((IkReal(-1.00000000000000))*(x119)*(x134)*(x95)))+(((IkReal(0.0800000000000000))*(x141)))+(((pz)*(x97)))+(((IkReal(-0.0800000000000000))*(x112)*(x96)))+(((px)*(x108)*(x112)))+(((IkReal(-1.00000000000000))*(cj3)*(x119)*(x123)))+(((IkReal(0.317000000000000))*(x137)))+(((IkReal(0.317000000000000))*(x130)))+(((x126)*(x133)))+(((IkReal(0.0126800000000000))*(x126)))+(((IkReal(-1.00000000000000))*(x103)*(x115)*(x99)))+(((x103)*(x96)*(x99)))+(((IkReal(0.0227500000000000))*(x112)))+(((IkReal(0.182104000000000))*(x145)))+(((IkReal(-1.00000000000000))*(pz)*(x101)*(x114)))+(((IkReal(-1.00000000000000))*(x102)*(x109)))+(((IkReal(-0.00800000000000000))*(sj2)*(x107)))+(((x126)*(x134)*(x94)))+(((IkReal(-0.145383500000000))*(x143)))+(((IkReal(0.00126800000000000))*(x99)))+(((pp)*(sj3)*(x119)))+(((IkReal(0.0800000000000000))*(x112)*(x115)))+(((IkReal(-1.00000000000000))*(x111)*(x142)))+(((x120)*(x91)))+(((IkReal(0.000320000000000000))*(r02)))+(((IkReal(-1.00000000000000))*(x115)*(x118)*(x132)))+(((IkReal(-1.00000000000000))*(x127)*(x135)))+(((x125)*(x145)))+(((x123)*(x99)))+(((IkReal(-1.00000000000000))*(x119)*(x133)))+(((x110)*(x96))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x147=((IkReal(1.00000000000000))*(sj5));
IkReal x148=((r02)*(sj3));
IkReal x149=((cj3)*(cj5));
IkReal x150=((cj2)*(r01));
IkReal x151=((r00)*(sj2));
IkReal x152=((IkReal(1.00000000000000))*(cj5));
if( IKabs(((gconst0)*(((((x149)*(x151)))+(((IkReal(-1.00000000000000))*(sj3)*(x147)*(x151)))+(((sj3)*(sj5)*(x150)))+(((IkReal(-1.00000000000000))*(x149)*(x150)))+(((IkReal(-1.00000000000000))*(x148)*(x152)))+(((IkReal(-1.00000000000000))*(cj3)*(r02)*(x147))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj5)*(sj3)*(x151)))+(((cj3)*(sj5)*(x151)))+(((IkReal(-1.00000000000000))*(x147)*(x148)))+(((IkReal(-1.00000000000000))*(sj3)*(x150)*(x152)))+(((r02)*(x149)))+(((IkReal(-1.00000000000000))*(cj3)*(x147)*(x150))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((x149)*(x151)))+(((IkReal(-1.00000000000000))*(sj3)*(x147)*(x151)))+(((sj3)*(sj5)*(x150)))+(((IkReal(-1.00000000000000))*(x149)*(x150)))+(((IkReal(-1.00000000000000))*(x148)*(x152)))+(((IkReal(-1.00000000000000))*(cj3)*(r02)*(x147)))))), ((gconst0)*(((((cj5)*(sj3)*(x151)))+(((cj3)*(sj5)*(x151)))+(((IkReal(-1.00000000000000))*(x147)*(x148)))+(((IkReal(-1.00000000000000))*(sj3)*(x150)*(x152)))+(((r02)*(x149)))+(((IkReal(-1.00000000000000))*(cj3)*(x147)*(x150)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x153=IKsin(j4);
IkReal x154=IKcos(j4);
IkReal x155=(pz)*(pz);
IkReal x156=(px)*(px);
IkReal x157=(py)*(py);
IkReal x158=((px)*(sj2));
IkReal x159=((IkReal(0.317000000000000))*(r02));
IkReal x160=((IkReal(0.0600000000000000))*(cj6));
IkReal x161=((r02)*(sj3));
IkReal x162=((IkReal(1.00000000000000))*(sj3));
IkReal x163=((r01)*(sj2));
IkReal x164=((cj3)*(r00));
IkReal x165=((IkReal(2.00000000000000))*(pz));
IkReal x166=((py)*(sj2));
IkReal x167=((IkReal(0.0400000000000000))*(cj3));
IkReal x168=((IkReal(0.0400000000000000))*(cj2));
IkReal x169=((pz)*(r00));
IkReal x170=((IkReal(0.0550000000000000))*(cj2));
IkReal x171=((IkReal(0.00126800000000000))*(sj2));
IkReal x172=((IkReal(0.00800000000000000))*(r02));
IkReal x173=((IkReal(0.0492000000000000))*(cj6));
IkReal x174=((cj3)*(r02));
IkReal x175=((IkReal(1.00000000000000))*(pp));
IkReal x176=((IkReal(0.0550000000000000))*(cj3));
IkReal x177=((cj2)*(py));
IkReal x178=((px)*(r01));
IkReal x179=((IkReal(0.0800000000000000))*(px));
IkReal x180=((IkReal(2.00000000000000))*(px));
IkReal x181=((cj2)*(r01));
IkReal x182=((IkReal(0.0162600000000000))*(cj6));
IkReal x183=((IkReal(0.0550000000000000))*(sj3));
IkReal x184=((py)*(r00));
IkReal x185=((IkReal(0.0800000000000000))*(pz));
IkReal x186=((IkReal(0.0275000000000000))*(sj3));
IkReal x187=((IkReal(0.00330000000000000))*(sj6));
IkReal x188=((r00)*(sj2));
IkReal x189=((cj2)*(r00));
IkReal x190=((IkReal(0.0400000000000000))*(sj3));
IkReal x191=((IkReal(1.00000000000000))*(cj3));
IkReal x192=((py)*(r01));
IkReal x193=((IkReal(0.0600000000000000))*(sj6));
IkReal x194=((r00)*(sj3));
IkReal x195=((IkReal(0.0259500000000000))*(sj3));
IkReal x196=((IkReal(2.00000000000000))*(sj3));
IkReal x197=((IkReal(0.00220000000000000))*(sj3));
IkReal x198=((cj2)*(px));
IkReal x199=((px)*(r00));
IkReal x200=((cj5)*(x153));
IkReal x201=((IkReal(2.00000000000000))*(x155));
IkReal x202=((py)*(x191));
IkReal x203=((sj3)*(x192));
IkReal x204=((sj5)*(x154));
IkReal x205=((sj5)*(x153));
IkReal x206=((cj3)*(x192));
IkReal x207=((cj5)*(x154));
IkReal x208=((sj6)*(x205));
evalcond[0]=((((IkReal(-1.00000000000000))*(x161)))+(x204)+(x200)+(((IkReal(-1.00000000000000))*(x181)*(x191)))+(((sj2)*(x164))));
evalcond[1]=((((sj3)*(x181)))+(((IkReal(-1.00000000000000))*(x162)*(x188)))+(((IkReal(-1.00000000000000))*(x174)))+(x205)+(((IkReal(-1.00000000000000))*(x207))));
evalcond[2]=((IkReal(-0.00400000000000000))+(((cj3)*(x158)))+(((IkReal(0.135500000000000))*(x153)))+(((IkReal(-1.00000000000000))*(pz)*(x162)))+(x167)+(((IkReal(-1.00000000000000))*(x177)*(x191)))+(((IkReal(-0.410000000000000))*(x204)))+(((IkReal(-0.410000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(x160)*(x207)))+(((x160)*(x205))));
evalcond[3]=((IkReal(-0.158500000000000))+(((IkReal(-1.00000000000000))*(x158)*(x162)))+(((IkReal(-1.00000000000000))*(pz)*(x191)))+(((IkReal(-0.135500000000000))*(x154)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-0.410000000000000))*(x205)))+(((IkReal(0.410000000000000))*(x207)))+(((IkReal(-1.00000000000000))*(x160)*(x204)))+(((IkReal(-1.00000000000000))*(x160)*(x200)))+(((sj3)*(x177))));
evalcond[4]=((((x186)*(x188)))+(((x168)*(x194)))+(((IkReal(-1.00000000000000))*(x162)*(x184)))+(((IkReal(-1.00000000000000))*(x174)*(x198)))+(((IkReal(-1.00000000000000))*(x166)*(x174)))+(((IkReal(0.0275000000000000))*(x174)))+(((cj2)*(pz)*(x164)))+(((IkReal(0.158500000000000))*(x163)))+(((IkReal(0.158500000000000))*(x189)))+(((IkReal(-0.0275000000000000))*(x205)))+(((cj3)*(pz)*(x163)))+(((IkReal(-1.00000000000000))*(x193)*(x207)))+(((IkReal(0.0275000000000000))*(x207)))+(((x193)*(x205)))+(((IkReal(-1.00000000000000))*(x181)*(x186)))+(((x163)*(x190)))+(((sj3)*(x178))));
evalcond[5]=((((x161)*(x166)))+(((x161)*(x198)))+(((IkReal(-1.00000000000000))*(py)*(x164)))+(((IkReal(0.0275000000000000))*(sj2)*(x164)))+(((cj3)*(x178)))+(((IkReal(-0.0275000000000000))*(cj3)*(x181)))+(((x164)*(x168)))+(((IkReal(-1.00000000000000))*(cj2)*(x162)*(x169)))+(((IkReal(-1.00000000000000))*(x193)*(x200)))+(((IkReal(-1.00000000000000))*(x193)*(x204)))+(((IkReal(0.0275000000000000))*(x200)))+(((IkReal(0.0275000000000000))*(x204)))+(((IkReal(-0.00400000000000000))*(x163)))+(((IkReal(-0.0275000000000000))*(x161)))+(((IkReal(-0.00400000000000000))*(x189)))+(((x163)*(x167)))+(((IkReal(-1.00000000000000))*(pz)*(x162)*(x163))));
evalcond[6]=((((x165)*(x203)))+(((x161)*(x201)))+(((px)*(x165)*(x194)))+(((IkReal(0.00220000000000000))*(cj3)*(x163)))+(((pz)*(x172)))+(((IkReal(0.0800000000000000))*(sj2)*(sj3)*(x169)))+(((IkReal(-2.00000000000000))*(sj2)*(x156)*(x164)))+(((IkReal(-1.00000000000000))*(x173)*(x207)))+(((x164)*(x177)*(x180)))+(((IkReal(-0.000320000000000000))*(x181)))+(((x176)*(x178)))+(((IkReal(-1.00000000000000))*(x187)*(x204)))+(((IkReal(-1.00000000000000))*(x187)*(x200)))+(((IkReal(0.000320000000000000))*(x188)))+(((IkReal(-1.00000000000000))*(sj3)*(x169)*(x170)))+(((px)*(x161)*(x170)))+(((IkReal(-0.000220000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(x158)*(x159)))+(((IkReal(-1.00000000000000))*(sj3)*(x181)*(x185)))+(((IkReal(-1.00000000000000))*(x161)*(x175)))+(((IkReal(0.111110000000000))*(x153)))+(((IkReal(-0.000220000000000000))*(x163)))+(((IkReal(-1.00000000000000))*(x158)*(x165)*(x174)))+(((IkReal(-2.00000000000000))*(x158)*(x206)))+(((IkReal(0.00800000000000000))*(x199)))+(((IkReal(0.00800000000000000))*(x192)))+(((x154)*(x182)))+(((pp)*(sj2)*(x164)))+(((IkReal(0.0800000000000000))*(x161)*(x177)))+(((IkReal(-1.00000000000000))*(cj3)*(x175)*(x181)))+(((IkReal(-0.0274625000000000))*(x161)))+(((IkReal(0.00126800000000000))*(x174)))+(((IkReal(2.00000000000000))*(cj3)*(x157)*(x181)))+(((x171)*(x194)))+(((IkReal(-0.0800000000000000))*(x158)*(x161)))+(((IkReal(-0.0800000000000000))*(x206)))+(((IkReal(-0.317000000000000))*(pz)*(x181)))+(((IkReal(-0.0242625000000000))*(cj3)*(x181)))+(((x159)*(x177)))+(((IkReal(-0.182104000000000))*(x200)))+(((IkReal(-0.145383500000000))*(x204)))+(((IkReal(-0.0126800000000000))*(r02)))+(((IkReal(-0.00126800000000000))*(sj3)*(x181)))+(((x173)*(x205)))+(((IkReal(0.317000000000000))*(sj2)*(x169)))+(((IkReal(-1.00000000000000))*(x164)*(x179)))+(((x165)*(x174)*(x177)))+(((IkReal(-0.0550000000000000))*(py)*(x164)))+(((IkReal(0.00220000000000000))*(cj2)*(x164)))+(((IkReal(0.0242625000000000))*(sj2)*(x164)))+(((IkReal(-1.00000000000000))*(x174)*(x185)))+(((IkReal(-1.00000000000000))*(pz)*(x163)*(x183)))+(((IkReal(0.0550000000000000))*(x161)*(x166))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x163)*(x197)))+(((x165)*(x206)))+(((IkReal(-1.00000000000000))*(pz)*(x164)*(x170)))+(((x153)*(x182)))+(((IkReal(-1.00000000000000))*(x178)*(x183)))+(((IkReal(-1.00000000000000))*(x173)*(x200)))+(((IkReal(-1.00000000000000))*(x173)*(x204)))+(((IkReal(-1.00000000000000))*(x177)*(x180)*(x194)))+(((IkReal(-1.00000000000000))*(x174)*(x175)))+(((x161)*(x185)))+(((x187)*(x207)))+(((IkReal(-1.00000000000000))*(x187)*(x205)))+(((x179)*(x194)))+(((IkReal(-1.00000000000000))*(x189)*(x197)))+(((IkReal(-1.00000000000000))*(pz)*(x163)*(x176)))+(((x158)*(x192)*(x196)))+(((IkReal(-0.111110000000000))*(x154)))+(((IkReal(0.0227500000000000))*(x174)))+(((pp)*(sj3)*(x181)))+(((x156)*(x188)*(x196)))+(((x188)*(x195)))+(((IkReal(-1.00000000000000))*(x161)*(x165)*(x177)))+(((px)*(x170)*(x174)))+(((IkReal(-0.00871750000000000))*(x163)))+(((IkReal(0.00126800000000000))*(cj3)*(x181)))+(((IkReal(-1.00000000000000))*(cj3)*(x181)*(x185)))+(((IkReal(-0.00871750000000000))*(x189)))+(((IkReal(0.0126800000000000))*(x188)))+(((sj2)*(x164)*(x185)))+(((IkReal(0.182104000000000))*(x207)))+(((IkReal(-0.00800000000000000))*(sj2)*(x169)))+(((IkReal(-0.0800000000000000))*(x158)*(x174)))+(((IkReal(-0.0126800000000000))*(x181)))+(((IkReal(0.0800000000000000))*(x174)*(x177)))+(((IkReal(0.317000000000000))*(x199)))+(((IkReal(0.317000000000000))*(x192)))+(((IkReal(-1.00000000000000))*(x157)*(x181)*(x196)))+(((IkReal(0.00126800000000000))*(x161)))+(((px)*(x164)*(x165)))+(((IkReal(-0.145383500000000))*(x205)))+(((x158)*(x172)))+(((IkReal(0.0550000000000000))*(x166)*(x174)))+(((x158)*(x161)*(x165)))+(((IkReal(0.000320000000000000))*(r02)))+(((IkReal(-1.00000000000000))*(x164)*(x171)))+(((IkReal(-1.00000000000000))*(x181)*(x195)))+(((x183)*(x184)))+(((IkReal(-1.00000000000000))*(pp)*(x162)*(x188)))+(((IkReal(-1.00000000000000))*(x172)*(x177)))+(((pz)*(x159)))+(((x174)*(x201)))+(((IkReal(0.00800000000000000))*(pz)*(x181)))+(((IkReal(0.0800000000000000))*(x203))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}
    }
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - youBot (3a49f9f75af3ebabc91ef6ef5b780b12)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
