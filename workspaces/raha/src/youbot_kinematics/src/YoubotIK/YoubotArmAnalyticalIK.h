/*
 * YoubotArmAnalyticalIK.h
 *
 *  Created on: Oct 29, 2013
 *      Author: raha
 */

#ifndef YOUBOTARMANALYTICALIK_H_
#define YOUBOTARMANALYTICALIK_H_

#include "YoubotArmIK.h"

namespace youbot_kinematics
{
/**
 * An analytical IK solver for the youBot arm.
 */
class YoubotArmAnalyticalIK: public YoubotArmIK
{
public:
  /**
   * Ctor.
   *
   * @brief Initialize the solver by providing a urdf::Model and a root and tip name.
   * @param robot_model A urdf::Model representation of the youBot robot model
   * @param robot_description The XML string that of a urdf::Model which represents the youBot robot model
   * @param root_name The root joint name of the arm
   * @param joint_name The tip joint name of the arm
   */
  YoubotArmAnalyticalIK(const urdf::ModelInterface &robot_model,
    const std::string &robot_description,
    const std::string &root_name,
    const std::string &tip_name);

  /**
   * Dtor.
   */
  virtual ~YoubotArmAnalyticalIK();

  /**
   * @see InverseKinematics::CartToJnt
   */
  int CartToJnt(const KDL::JntArray& q_init,
    const KDL::Frame& p_in,
    std::vector<KDL::JntArray>& q_out);

  /**
   * @see InverseKinematics::getSolverInfo
   */
  void getSolverInfo(moveit_msgs::KinematicSolverInfo &response);


private:
  /**
   * Tell if a solution is inside of the joint limits.
   *
   * @param solution The solution that has been generated by the IK
   *          solver.
   * @return True if the solution is valid else false.
   */
  bool isSolutionValid(const KDL::JntArray &solution) const;

  /**
   * The IK solver. It solves for translation (x, y, z) as well as roll
   * and pitch of the final arm pose. A pose with yaw != 0 cannot be
   * solved, so it's not possible to provide the yaw.
   *
   * The "offset" parameters allow searching for redundant solutions.
   * Joint 1 can either be pointing towards the position or away from the
   * position. Joint 3 can either be up or down.
   *
   * The IK solver is based on a geometric approach:
   * - Joint 1 determines the "pointing" direction of the arm. It can be
   *   considered in isolation by only looking at the x-y-plane. This
   *   enables us to treat the remaining joints in a plane that is
   *   perpendicular to the x-y-plane.
   * - Joint 2 and joint 3 determine the height and distance of the
   *   gripper (seen in the frame of joint 2). They have to be considered
   *   in combination, which also leads to a redundant solution.
   *   The height and distance of the gripper depend on the pitch of the
   *   final.
   * - Joint 4 determines at which pitch angle the final pose is
   *   approached.
   * - Joint 5 determines at which roll angle the final pose is
   *   approached. It can be considered in isolation. There are two
   *   possible solutions: One is the provided roll and the other is the
   *   provided roll plus pi.
   *
   *
   * @param x: X coordinate of the cartesian position
   * @param y: Y coordinate of the cartesian position
   * @param z: Z coordinate of the cartesian position
   * @param roll: Roll of the gripper
   * @param pitch: Pitch of the gripper
   * @param offset_joint_1: Determines the result of the first joint
   * @param offset_joint_3: Determines the result of the third joint
   * @param offset_joint_5: Determines the result of the fifth joint
   * @return: If there is a solution a JntArray with five entries is
   *      returned, else the JntArray is empty.
   */
  KDL::JntArray ik(const KDL::Frame& frame, bool offset_joint_1 = false,
      bool offset_joint_3 = false, bool offset_joint_5 = false);

  KDL::Frame ProjectGoalOrientationIntoArmSubspace(const KDL::Frame &goal) const;


private:
  /**
   * Minimum joint limits.
   */
  std::vector<double> _min_angles;

  /**
   * Maximum joint limits.
   */
  std::vector<double> _max_angles;

  /**
   * Information about the IK solver.
   */
  moveit_msgs::KinematicSolverInfo _solver_info;

  /**
   * Threshold when a number is near to +1 or -1. This is required to
   * prevent invalid arguments to acos.
   */
  static const double ALMOST_PLUS_ONE;
  static const double ALMOST_MINUS_ONE;
};

} /* namespace youbot_kinematics */

#endif /* YOUBOTARMANALYTICALIK_H_ */
